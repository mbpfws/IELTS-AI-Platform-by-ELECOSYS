datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  name            String?
  agents          Agent[]
  chats           Chat[]
  speakingSessions SpeakingSession[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Agent {
  id           String   @id @default(uuid())
  name         String
  description  String
  systemPrompt String
  model        String
  temperature  Float    @default(0.7)
  maxTokens    Int      @default(8192)
  topP         Float    @default(0.95)
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  chats        Chat[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Chat {
  id        String    @id @default(uuid())
  messages  Message[]
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  agent     Agent     @relation(fields: [agentId], references: [id])
  agentId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id        String   @id @default(uuid())
  content   String
  role      String   // 'user' or 'assistant'
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  createdAt DateTime @default(now())
}

model SpeakingSession {
  id            String    @id @default(uuid())
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  duration      Int       // Duration in minutes
  startTime     DateTime  @default(now())
  endTime       DateTime?
  metrics       SpeakingMetrics?
  messages      SpeakingMessage[]
  recordings    AudioRecording[]
  feedback      SpeakingFeedback?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model SpeakingMessage {
  id              String          @id @default(uuid())
  content         String
  role            String          // 'user' or 'assistant'
  session         SpeakingSession @relation(fields: [sessionId], references: [id])
  sessionId       String
  responseTime    Int?            // Response time in milliseconds
  wordCount       Int?
  createdAt       DateTime        @default(now())
}

model AudioRecording {
  id              String          @id @default(uuid())
  url             String
  duration        Int             // Duration in seconds
  session         SpeakingSession @relation(fields: [sessionId], references: [id])
  sessionId       String
  createdAt       DateTime        @default(now())
}

model SpeakingMetrics {
  id              String          @id @default(uuid())
  session         SpeakingSession @relation(fields: [sessionId], references: [id])
  sessionId       String          @unique
  pronunciation   Float
  grammar         Float
  vocabulary      Float 
  fluency         Float
  coherence       Float
  averageResponseTime Float
  totalMessages   Int
  uniqueWords     Int
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model SpeakingFeedback {
  id              String          @id @default(uuid())
  session         SpeakingSession @relation(fields: [sessionId], references: [id])
  sessionId       String          @unique
  strengths       String          // JSON string array
  weaknesses      String          // JSON string array
  suggestions     String          // JSON string array
  overallComment  String
  createdAt       DateTime        @default(now())
}
