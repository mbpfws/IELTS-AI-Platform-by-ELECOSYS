datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  name             String?
  agents           Agent[]
  chats            Chat[]
  speaking_sessions Speaking_Session[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Agent {
  id           String   @id @default(uuid())
  name         String
  description  String
  systemPrompt String
  model        String
  temperature  Float    @default(0.7)
  maxTokens    Int      @default(8192)
  topP         Float    @default(0.95)
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  chats        Chat[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Chat {
  id        String    @id @default(uuid())
  messages  Message[]
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  agent     Agent     @relation(fields: [agentId], references: [id])
  agentId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id        String   @id @default(uuid())
  content   String
  role      String   // 'user' or 'assistant'
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  createdAt DateTime @default(now())
}

model Speaking_Session {
  id            String            @id @default(uuid())
  user          User             @relation(fields: [userId], references: [id])
  userId        String
  duration      Int              // Duration in minutes
  startTime     DateTime         @default(now())
  endTime       DateTime?
  metrics       Speaking_Metrics?
  messages      Speaking_Message[]
  recordings    Audio_Recording[]
  feedback      Speaking_Feedback?
  template      Speaking_Template? @relation(fields: [templateId], references: [id])
  templateId    String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model Speaking_Message {
  id              String           @id @default(uuid())
  content         String
  role            String          // 'user' or 'assistant'
  session         Speaking_Session @relation(fields: [sessionId], references: [id])
  sessionId       String
  responseTime    Int?            // Response time in milliseconds
  wordCount       Int?
  createdAt       DateTime        @default(now())
}

model Audio_Recording {
  id              String           @id @default(uuid())
  url             String
  duration        Int             // Duration in seconds
  session         Speaking_Session @relation(fields: [sessionId], references: [id])
  sessionId       String
  createdAt       DateTime        @default(now())
}

model Speaking_Metrics {
  id                  String           @id @default(uuid())
  session             Speaking_Session @relation(fields: [sessionId], references: [id])
  sessionId           String          @unique
  pronunciation       Float
  grammar             Float
  vocabulary          Float 
  fluency             Float
  coherence           Float
  averageResponseTime Float
  totalWords          Int
  createdAt           DateTime        @default(now())
}

model Speaking_Feedback {
  id              String           @id @default(uuid())
  session         Speaking_Session @relation(fields: [sessionId], references: [id])
  sessionId       String          @unique
  content         String
  score           Float
  createdAt       DateTime        @default(now())
}

model Speaking_Template {
  id            String            @id @default(uuid())
  title         String
  description   String
  duration      Int              // Duration in minutes
  parts         Speaking_Part[]
  sessions      Speaking_Session[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model Speaking_Part {
  id            String            @id @default(uuid())
  part          Int
  prompt        String
  template      Speaking_Template @relation(fields: [templateId], references: [id])
  templateId    String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}
