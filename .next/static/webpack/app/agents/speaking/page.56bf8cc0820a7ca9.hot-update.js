"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/agents/speaking/page",{

/***/ "(app-pages-browser)/./src/services/supabaseService.ts":
/*!*****************************************!*\
  !*** ./src/services/supabaseService.ts ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   supabaseService: () => (/* binding */ supabaseService)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nif (false) {}\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://hpalsfsnabqscgzyjuzo.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhwYWxzZnNuYWJxc2NnenlqdXpvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjcyMzc4NDYsImV4cCI6MjA0MjgxMzg0Nn0.6v45IUdEyHdVNQCW7LNrDXFUsD70YH5j1NZ6xyTEMvo\");\nclass SupabaseService {\n    async getTemplates(type) {\n        try {\n            let query = supabase.from(this.TEMPLATES_TABLE).select(\"\\n          *,\\n          questions:\".concat(this.TEMPLATE_QUESTIONS_TABLE, \"(id, question, type),\\n          topics:\").concat(this.TEMPLATE_TOPICS_TABLE, \"(id, topic),\\n          vocabulary:\").concat(this.TEMPLATE_VOCABULARY_TABLE, \"(id, word, meaning, example)\\n        \"));\n            if (type) {\n                query = query.eq('type', type);\n            }\n            const { data, error } = await query.order('created_at', {\n                ascending: false\n            });\n            if (error) throw error;\n            return data || [];\n        } catch (error) {\n            console.error('Error fetching templates:', error);\n            throw error;\n        }\n    }\n    async createSession(session) {\n        try {\n            // First check if template exists\n            const { data: template, error: templateError } = await supabase.from(this.TEMPLATES_TABLE).select('id').eq('id', session.template_id).single();\n            if (templateError || !template) {\n                throw new Error('Template not found');\n            }\n            // Create session with proper UUID for user_id\n            const { data, error } = await supabase.from(this.SESSIONS_TABLE).insert({\n                user_id: session.user_id,\n                template_id: session.template_id,\n                duration: session.duration,\n                start_time: new Date().toISOString(),\n                metrics: {\n                    fluency: 0,\n                    lexical: 0,\n                    grammar: 0,\n                    pronunciation: 0\n                }\n            }).select('*').single();\n            if (error) {\n                console.error('Supabase error:', error);\n                throw error;\n            }\n            if (!data) {\n                throw new Error('No data returned from session creation');\n            }\n            return data;\n        } catch (error) {\n            console.error('Error creating session:', error);\n            throw error;\n        }\n    }\n    async endSession(session_id) {\n        try {\n            const { error } = await supabase.from(this.SESSIONS_TABLE).update({\n                end_time: new Date().toISOString()\n            }).eq('id', session_id);\n            if (error) throw error;\n        } catch (error) {\n            console.error('Error ending session:', error);\n            throw error;\n        }\n    }\n    async createMessage(message) {\n        try {\n            const { data, error } = await supabase.from(this.MESSAGES_TABLE).insert({\n                session_id: message.session_id,\n                role: message.role,\n                content: message.content,\n                audio_url: message.audio_url,\n                created_at: new Date().toISOString()\n            }).select().single();\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error('Error creating message:', error);\n            throw error;\n        }\n    }\n    async createFeedback(feedback) {\n        try {\n            const { data, error } = await supabase.from(this.FEEDBACK_TABLE).insert({\n                session_id: feedback.session_id,\n                content: feedback.content,\n                metrics: feedback.metrics,\n                created_at: new Date().toISOString()\n            }).select().single();\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error('Error creating feedback:', error);\n            throw error;\n        }\n    }\n    async uploadAudio(file, session_id) {\n        try {\n            const filename = \"\".concat(session_id, \"/\").concat(Date.now(), \".webm\");\n            const { data, error } = await supabase.storage.from(this.RECORDINGS_BUCKET).upload(filename, file);\n            if (error) throw error;\n            const { data: urlData } = supabase.storage.from(this.RECORDINGS_BUCKET).getPublicUrl(filename);\n            // Record the audio file in the recordings table\n            const { error: recordError } = await supabase.from(this.RECORDINGS_TABLE).insert({\n                session_id,\n                file_path: filename,\n                public_url: urlData.publicUrl,\n                created_at: new Date().toISOString()\n            });\n            if (recordError) throw recordError;\n            return urlData.publicUrl;\n        } catch (error) {\n            console.error('Error uploading audio:', error);\n            throw error;\n        }\n    }\n    async updateSessionMetrics(session_id, metrics) {\n        try {\n            const { error } = await supabase.from(this.SESSIONS_TABLE).update({\n                metrics\n            }).eq('id', session_id);\n            if (error) throw error;\n            // Also record in the metrics table for historical tracking\n            const { error: metricsError } = await supabase.from(this.METRICS_TABLE).insert({\n                session_id,\n                metrics,\n                created_at: new Date().toISOString()\n            });\n            if (metricsError) throw metricsError;\n        } catch (error) {\n            console.error('Error updating session metrics:', error);\n            throw error;\n        }\n    }\n    async getSessionMessages(session_id) {\n        try {\n            const { data, error } = await supabase.from(this.MESSAGES_TABLE).select('*').eq('session_id', session_id).order('created_at', {\n                ascending: true\n            });\n            if (error) throw error;\n            return data || [];\n        } catch (error) {\n            console.error('Error fetching session messages:', error);\n            throw error;\n        }\n    }\n    async getSessionFeedback(session_id) {\n        try {\n            const { data, error } = await supabase.from(this.FEEDBACK_TABLE).select('*').eq('session_id', session_id).order('created_at', {\n                ascending: true\n            });\n            if (error) throw error;\n            return data || [];\n        } catch (error) {\n            console.error('Error fetching session feedback:', error);\n            throw error;\n        }\n    }\n    async getSessionRecordings(session_id) {\n        try {\n            const { data, error } = await supabase.from(this.RECORDINGS_TABLE).select('public_url').eq('session_id', session_id).order('created_at', {\n                ascending: true\n            });\n            if (error) throw error;\n            return (data === null || data === void 0 ? void 0 : data.map((r)=>r.public_url)) || [];\n        } catch (error) {\n            console.error('Error fetching session recordings:', error);\n            throw error;\n        }\n    }\n    constructor(){\n        this.TEMPLATES_TABLE = 'ailts_templates';\n        this.SESSIONS_TABLE = 'ailts_sessions';\n        this.MESSAGES_TABLE = 'ailts_messages';\n        this.FEEDBACK_TABLE = 'ailts_feedback';\n        this.METRICS_TABLE = 'ailts_metrics';\n        this.RECORDINGS_TABLE = 'ailts_recordings';\n        this.TEMPLATE_QUESTIONS_TABLE = 'ailts_template_questions';\n        this.TEMPLATE_TOPICS_TABLE = 'ailts_template_topics';\n        this.TEMPLATE_VOCABULARY_TABLE = 'ailts_template_vocabulary';\n        this.RECORDINGS_BUCKET = 'ielts-recordings';\n    }\n}\nconst supabaseService = new SupabaseService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/supabaseService.ts\n"));

/***/ })

});