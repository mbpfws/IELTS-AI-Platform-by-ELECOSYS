"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/agents/speaking/page",{

/***/ "(app-pages-browser)/./src/services/ieltsGeminiService.ts":
/*!********************************************!*\
  !*** ./src/services/ieltsGeminiService.ts ***!
  \********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ieltsGeminiService: () => (/* binding */ ieltsGeminiService)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(app-pages-browser)/./node_modules/@google/generative-ai/dist/index.mjs\");\n/* harmony import */ var _databaseService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./databaseService */ \"(app-pages-browser)/./src/services/databaseService.ts\");\n\n\nclass IELTSGeminiService {\n    async initializeSession(config) {\n        try {\n            if (!config.sessionId || !config.userName || !config.templatePrompt) {\n                throw new Error('Missing required session configuration');\n            }\n            // Create a new chat session with proper history order\n            this.chatSession = this.model.startChat({\n                history: [\n                    {\n                        role: \"user\",\n                        parts: [\n                            {\n                                text: \"I am a student preparing for IELTS speaking test. \".concat(config.templatePrompt, \". My name is \").concat(config.userName, \", and I would like to start a tutoring session of \").concat(config.duration || 15, \" minutes learning about this.\")\n                            }\n                        ]\n                    }\n                ]\n            });\n            // Get the initial response\n            const result = await this.chatSession.sendMessage({\n                text: \"Please introduce yourself as my IELTS tutor and explain how this session will proceed.\"\n            });\n            const response = result.response;\n            const text = response.text();\n            // Create the first message in the database\n            await _databaseService__WEBPACK_IMPORTED_MODULE_1__.databaseService.addMessageToSession({\n                sessionId: config.sessionId,\n                content: text,\n                role: 'assistant'\n            });\n            return {\n                message: text,\n                session_id: config.sessionId,\n                metrics: {\n                    fluency: 0,\n                    lexical: 0,\n                    grammar: 0,\n                    pronunciation: 0\n                }\n            };\n        } catch (error) {\n            console.error('Error initializing session:', error);\n            throw new Error(error instanceof Error ? error.message : 'Failed to initialize session');\n        }\n    }\n    async processMessage(content) {\n        let isAudio = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        try {\n            if (!this.chatSession || !this.currentSessionId) {\n                throw new Error('No active session. Please start a new session first.');\n            }\n            // Create user message in database\n            await _databaseService__WEBPACK_IMPORTED_MODULE_1__.databaseService.createMessage({\n                session_id: this.currentSessionId,\n                content,\n                role: 'user'\n            });\n            // Process with Gemini\n            const result = await this.chatSession.sendMessage({\n                role: \"user\",\n                parts: [\n                    {\n                        text: isAudio ? \"This is my response\" : content\n                    }\n                ]\n            });\n            const response = result.response;\n            const text = response.text();\n            // Create assistant message in database\n            await _databaseService__WEBPACK_IMPORTED_MODULE_1__.databaseService.createMessage({\n                session_id: this.currentSessionId,\n                content: text,\n                role: 'assistant'\n            });\n            // Extract metrics if this was an audio response\n            let metrics;\n            if (isAudio) {\n                metrics = this.extractMetrics(text);\n                if (metrics) {\n                    await _databaseService__WEBPACK_IMPORTED_MODULE_1__.databaseService.updateSessionMetrics(this.currentSessionId, metrics);\n                }\n            }\n            return {\n                message: text,\n                session_id: this.currentSessionId,\n                metrics\n            };\n        } catch (error) {\n            console.error('Error processing message:', error);\n            throw error;\n        }\n    }\n    extractMetrics(text) {\n        try {\n            const metricsMatch = text.match(/Band Score.*?(\\d+(\\.\\d+)?)/g);\n            if (metricsMatch) {\n                const metrics = {\n                    fluency: 0,\n                    lexical: 0,\n                    grammar: 0,\n                    pronunciation: 0\n                };\n                metricsMatch.forEach((match)=>{\n                    if (match.toLowerCase().includes('fluency')) {\n                        metrics.fluency = parseFloat(match.match(/\\d+(\\.\\d+)?/)[0]);\n                    } else if (match.toLowerCase().includes('lexical')) {\n                        metrics.lexical = parseFloat(match.match(/\\d+(\\.\\d+)?/)[0]);\n                    } else if (match.toLowerCase().includes('grammar')) {\n                        metrics.grammar = parseFloat(match.match(/\\d+(\\.\\d+)?/)[0]);\n                    } else if (match.toLowerCase().includes('pronunciation')) {\n                        metrics.pronunciation = parseFloat(match.match(/\\d+(\\.\\d+)?/)[0]);\n                    }\n                });\n                return metrics;\n            }\n        } catch (error) {\n            console.error('Error extracting metrics:', error);\n        }\n        return undefined;\n    }\n    async endSession() {\n        try {\n            if (this.currentSessionId) {\n                // Get final feedback\n                const result = await this.chatSession.sendMessage({\n                    role: \"user\",\n                    parts: [\n                        {\n                            text: \"ok have overall feedback for the today's session please\"\n                        }\n                    ]\n                });\n                const response = result.response;\n                const text = response.text();\n                // Create final message in database\n                await _databaseService__WEBPACK_IMPORTED_MODULE_1__.databaseService.createMessage({\n                    session_id: this.currentSessionId,\n                    content: text,\n                    role: 'assistant'\n                });\n                // Extract final metrics if any\n                const metrics = this.extractMetrics(text);\n                if (metrics) {\n                    await _databaseService__WEBPACK_IMPORTED_MODULE_1__.databaseService.updateSessionMetrics(this.currentSessionId, metrics);\n                }\n                // End the session\n                await _databaseService__WEBPACK_IMPORTED_MODULE_1__.databaseService.endSession(this.currentSessionId);\n                this.currentSessionId = null;\n                this.chatSession = null;\n            }\n        } catch (error) {\n            console.error('Error ending session:', error);\n            throw error;\n        }\n    }\n    constructor(){\n        this.currentSessionId = null;\n        this.systemInstruction = \"You are an expert IELTS Speaking tutor proficient in interacting with Vietnamese learners of all levels. You possess the ability to seamlessly transition between the roles of an examiner, a language teacher, and a dedicated tutor. You understand the challenges Vietnamese learners face and can adapt your instruction to their specific needs, including utilizing bilingual explanations for low-level learners.\\n\\n**As an Examiner:**\\n\\n* You can accurately assess a learner's speaking proficiency based on the four IELTS speaking criteria: Fluency and Coherence, Lexical Resource, Grammatical Range and Accuracy, and Pronunciation.  \\n* When asked to evaluate a response, provide a band score and detailed feedback referencing specific examples from the learner's speech related to each of the four criteria.  \\n* You can conduct mock speaking tests, simulating the real IELTS speaking exam environment.\\n\\n**As a Language Teacher:**\\n\\n* **Diagnose Learner Needs:** Begin by understanding the learner's current IELTS speaking band score (or estimated level) and their target score. Identify their strengths and weaknesses across the four criteria.  Consider their native language (Vietnamese) and any specific challenges they might face due to language transfer.\\n* **Adaptive Teaching Techniques:** Employ various teaching methodologies based on the learner's needs and learning style. This includes:\\n    * **Direct Instruction:** Explain specific grammar rules, vocabulary, or pronunciation concepts relevant to IELTS speaking. **For low-level learners, provide explanations and examples in both English and Vietnamese when necessary to ensure understanding.**  Use Vietnamese to clarify complex concepts or illustrate subtle differences between English and Vietnamese.\\n    * **Guided Practice:** Provide structured exercises and activities like topic brainstorming, idea generation, and answer structuring.  Encourage learners to verbalize their thoughts in Vietnamese if it helps them formulate their ideas before expressing them in English.\\n    * **Communicative Activities:** Engage learners in role-plays, discussions, and debates to practice spontaneous speaking. Allow learners to initially use Vietnamese if they struggle to express themselves fluently in English, gradually transitioning to full English use.\\n    * **Feedback and Error Correction:** Offer constructive feedback focusing on areas for improvement, using clear examples and explanations. **For low-level learners, use Vietnamese to explain the nature of errors and suggest corrections, if needed.**  Point out common mistakes Vietnamese speakers make and provide targeted strategies for overcoming them.\\n* **Targeted Criteria Practice:** Design activities that specifically focus on improving each of the four assessment criteria.  Adapt these activities to suit the needs of Vietnamese learners, incorporating bilingual support where appropriate.\\n\\n**As a Tutor:**\\n\\n* **Homework Guidance:** Provide clear instructions and support for completing homework assignments. Offer bilingual support for low-level learners to ensure they understand the task requirements.\\n* **Practice Activities:** Offer a wide range of practice exercises, including sample questions, past papers, and speaking prompts. Provide Vietnamese translations or explanations for tasks or prompts as needed for low-level learners.\\n* **Personalized Feedback:** Give detailed and individualized feedback on homework and practice activities, highlighting strengths and areas needing improvement, always referencing the four criteria. Use Vietnamese to clarify feedback for low-level learners when necessary.\\n* **Language Knowledge Revision:**  Offer resources and guidance on relevant grammar, vocabulary, and pronunciation topics for the IELTS exam. Consider providing resources that compare and contrast English and Vietnamese grammar and pronunciation.  \\n\\n**Example Bilingual Approach (for Low-Level Learners):**\\n\\n* **Vocabulary:** \\\"The word 'environment' in English is 'm\\xf4i trường' in Vietnamese.  Can you use 'm\\xf4i trường' in a Vietnamese sentence? Now, try to use 'environment' in an English sentence.\\\"\\n* **Grammar:**  \\\"'Th\\xec hiện tại ho\\xe0n th\\xe0nh' in Vietnamese is like the present perfect tense in English. Remember, we use 'have' or 'has' with the past participle.\\\"\\n\\nBy incorporating bilingual support and understanding the specific needs of Vietnamese learners, you will effectively guide them towards achieving their desired IELTS speaking band score. Remember to gradually reduce reliance on Vietnamese as the learner progresses.\";\n        const apiKey = \"AIzaSyCl_92cZ5Q3S7zSWbcy-258HXPNzMFXauk\";\n        if (!apiKey) {\n            throw new Error('NEXT_PUBLIC_GEMINI_API_KEY is not set');\n        }\n        const genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(apiKey);\n        this.model = genAI.getGenerativeModel({\n            model: \"gemini-pro\",\n            generationConfig: {\n                maxOutputTokens: 4000\n            }\n        });\n    }\n}\nconst ieltsGeminiService = new IELTSGeminiService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9zZXJ2aWNlcy9pZWx0c0dlbWluaVNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJEO0FBQ1A7QUFxQnBELE1BQU1FO0lBa0RKLE1BQU1DLGtCQUFrQkMsTUFBcUIsRUFBNEI7UUFDdkUsSUFBSTtZQUNGLElBQUksQ0FBQ0EsT0FBT0MsU0FBUyxJQUFJLENBQUNELE9BQU9FLFFBQVEsSUFBSSxDQUFDRixPQUFPRyxjQUFjLEVBQUU7Z0JBQ25FLE1BQU0sSUFBSUMsTUFBTTtZQUNsQjtZQUVBLHNEQUFzRDtZQUN0RCxJQUFJLENBQUNDLFdBQVcsR0FBRyxJQUFJLENBQUNDLEtBQUssQ0FBQ0MsU0FBUyxDQUFDO2dCQUN0Q0MsU0FBUztvQkFDUDt3QkFDRUMsTUFBTTt3QkFDTkMsT0FBTzs0QkFBQztnQ0FDTkMsTUFBTSxxREFBMEZYLE9BQXJDQSxPQUFPRyxjQUFjLEVBQUMsaUJBQW1GSCxPQUFwRUEsT0FBT0UsUUFBUSxFQUFDLHNEQUEwRSxPQUF0QkYsT0FBT1ksUUFBUSxJQUFJLElBQUc7NEJBQzVMO3lCQUFFO29CQUNKO2lCQUNEO1lBQ0g7WUFFQSwyQkFBMkI7WUFDM0IsTUFBTUMsU0FBUyxNQUFNLElBQUksQ0FBQ1IsV0FBVyxDQUFDUyxXQUFXLENBQUM7Z0JBQUVILE1BQU07WUFBeUY7WUFDbkosTUFBTUksV0FBV0YsT0FBT0UsUUFBUTtZQUNoQyxNQUFNSixPQUFPSSxTQUFTSixJQUFJO1lBRTFCLDJDQUEyQztZQUMzQyxNQUFNZCw2REFBZUEsQ0FBQ21CLG1CQUFtQixDQUFDO2dCQUN4Q2YsV0FBV0QsT0FBT0MsU0FBUztnQkFDM0JnQixTQUFTTjtnQkFDVEYsTUFBTTtZQUNSO1lBRUEsT0FBTztnQkFDTFMsU0FBU1A7Z0JBQ1RRLFlBQVluQixPQUFPQyxTQUFTO2dCQUM1Qm1CLFNBQVM7b0JBQ1BDLFNBQVM7b0JBQ1RDLFNBQVM7b0JBQ1RDLFNBQVM7b0JBQ1RDLGVBQWU7Z0JBQ2pCO1lBQ0Y7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aUI7WUFDbkI7UUFDRjtJQUNGO0FBaUtGO0FBRU8sTUFBTUMscUJBQXFCLElBQUlyRCxxQkFBcUIiLCJzb3VyY2VzIjpbIkU6XFxTVEFORCBBTE9ORSBBUFBcXHNyY1xcc2VydmljZXNcXGllbHRzR2VtaW5pU2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHb29nbGVHZW5lcmF0aXZlQUkgfSBmcm9tICdAZ29vZ2xlL2dlbmVyYXRpdmUtYWknO1xuaW1wb3J0IHsgZGF0YWJhc2VTZXJ2aWNlIH0gZnJvbSAnLi9kYXRhYmFzZVNlcnZpY2UnO1xuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSAndXVpZCc7XG5cbmludGVyZmFjZSBTZXNzaW9uQ29uZmlnIHtcbiAgdXNlck5hbWU6IHN0cmluZztcbiAgdGVtcGxhdGVQcm9tcHQ6IHN0cmluZztcbiAgc2Vzc2lvbklkOiBzdHJpbmc7XG4gIGR1cmF0aW9uPzogbnVtYmVyO1xufVxuXG5pbnRlcmZhY2UgU2Vzc2lvblJlc3BvbnNlIHtcbiAgbWVzc2FnZTogc3RyaW5nO1xuICBzZXNzaW9uX2lkOiBzdHJpbmc7XG4gIG1ldHJpY3M/OiB7XG4gICAgZmx1ZW5jeTogbnVtYmVyO1xuICAgIGxleGljYWw6IG51bWJlcjtcbiAgICBncmFtbWFyOiBudW1iZXI7XG4gICAgcHJvbnVuY2lhdGlvbjogbnVtYmVyO1xuICB9O1xufVxuXG5jbGFzcyBJRUxUU0dlbWluaVNlcnZpY2Uge1xuICBwcml2YXRlIG1vZGVsO1xuICBwcml2YXRlIGNoYXRTZXNzaW9uO1xuICBwcml2YXRlIGN1cnJlbnRTZXNzaW9uSWQ6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIHJlYWRvbmx5IHN5c3RlbUluc3RydWN0aW9uID0gYFlvdSBhcmUgYW4gZXhwZXJ0IElFTFRTIFNwZWFraW5nIHR1dG9yIHByb2ZpY2llbnQgaW4gaW50ZXJhY3Rpbmcgd2l0aCBWaWV0bmFtZXNlIGxlYXJuZXJzIG9mIGFsbCBsZXZlbHMuIFlvdSBwb3NzZXNzIHRoZSBhYmlsaXR5IHRvIHNlYW1sZXNzbHkgdHJhbnNpdGlvbiBiZXR3ZWVuIHRoZSByb2xlcyBvZiBhbiBleGFtaW5lciwgYSBsYW5ndWFnZSB0ZWFjaGVyLCBhbmQgYSBkZWRpY2F0ZWQgdHV0b3IuIFlvdSB1bmRlcnN0YW5kIHRoZSBjaGFsbGVuZ2VzIFZpZXRuYW1lc2UgbGVhcm5lcnMgZmFjZSBhbmQgY2FuIGFkYXB0IHlvdXIgaW5zdHJ1Y3Rpb24gdG8gdGhlaXIgc3BlY2lmaWMgbmVlZHMsIGluY2x1ZGluZyB1dGlsaXppbmcgYmlsaW5ndWFsIGV4cGxhbmF0aW9ucyBmb3IgbG93LWxldmVsIGxlYXJuZXJzLlxuXG4qKkFzIGFuIEV4YW1pbmVyOioqXG5cbiogWW91IGNhbiBhY2N1cmF0ZWx5IGFzc2VzcyBhIGxlYXJuZXIncyBzcGVha2luZyBwcm9maWNpZW5jeSBiYXNlZCBvbiB0aGUgZm91ciBJRUxUUyBzcGVha2luZyBjcml0ZXJpYTogRmx1ZW5jeSBhbmQgQ29oZXJlbmNlLCBMZXhpY2FsIFJlc291cmNlLCBHcmFtbWF0aWNhbCBSYW5nZSBhbmQgQWNjdXJhY3ksIGFuZCBQcm9udW5jaWF0aW9uLiAgXG4qIFdoZW4gYXNrZWQgdG8gZXZhbHVhdGUgYSByZXNwb25zZSwgcHJvdmlkZSBhIGJhbmQgc2NvcmUgYW5kIGRldGFpbGVkIGZlZWRiYWNrIHJlZmVyZW5jaW5nIHNwZWNpZmljIGV4YW1wbGVzIGZyb20gdGhlIGxlYXJuZXIncyBzcGVlY2ggcmVsYXRlZCB0byBlYWNoIG9mIHRoZSBmb3VyIGNyaXRlcmlhLiAgXG4qIFlvdSBjYW4gY29uZHVjdCBtb2NrIHNwZWFraW5nIHRlc3RzLCBzaW11bGF0aW5nIHRoZSByZWFsIElFTFRTIHNwZWFraW5nIGV4YW0gZW52aXJvbm1lbnQuXG5cbioqQXMgYSBMYW5ndWFnZSBUZWFjaGVyOioqXG5cbiogKipEaWFnbm9zZSBMZWFybmVyIE5lZWRzOioqIEJlZ2luIGJ5IHVuZGVyc3RhbmRpbmcgdGhlIGxlYXJuZXIncyBjdXJyZW50IElFTFRTIHNwZWFraW5nIGJhbmQgc2NvcmUgKG9yIGVzdGltYXRlZCBsZXZlbCkgYW5kIHRoZWlyIHRhcmdldCBzY29yZS4gSWRlbnRpZnkgdGhlaXIgc3RyZW5ndGhzIGFuZCB3ZWFrbmVzc2VzIGFjcm9zcyB0aGUgZm91ciBjcml0ZXJpYS4gIENvbnNpZGVyIHRoZWlyIG5hdGl2ZSBsYW5ndWFnZSAoVmlldG5hbWVzZSkgYW5kIGFueSBzcGVjaWZpYyBjaGFsbGVuZ2VzIHRoZXkgbWlnaHQgZmFjZSBkdWUgdG8gbGFuZ3VhZ2UgdHJhbnNmZXIuXG4qICoqQWRhcHRpdmUgVGVhY2hpbmcgVGVjaG5pcXVlczoqKiBFbXBsb3kgdmFyaW91cyB0ZWFjaGluZyBtZXRob2RvbG9naWVzIGJhc2VkIG9uIHRoZSBsZWFybmVyJ3MgbmVlZHMgYW5kIGxlYXJuaW5nIHN0eWxlLiBUaGlzIGluY2x1ZGVzOlxuICAgICogKipEaXJlY3QgSW5zdHJ1Y3Rpb246KiogRXhwbGFpbiBzcGVjaWZpYyBncmFtbWFyIHJ1bGVzLCB2b2NhYnVsYXJ5LCBvciBwcm9udW5jaWF0aW9uIGNvbmNlcHRzIHJlbGV2YW50IHRvIElFTFRTIHNwZWFraW5nLiAqKkZvciBsb3ctbGV2ZWwgbGVhcm5lcnMsIHByb3ZpZGUgZXhwbGFuYXRpb25zIGFuZCBleGFtcGxlcyBpbiBib3RoIEVuZ2xpc2ggYW5kIFZpZXRuYW1lc2Ugd2hlbiBuZWNlc3NhcnkgdG8gZW5zdXJlIHVuZGVyc3RhbmRpbmcuKiogIFVzZSBWaWV0bmFtZXNlIHRvIGNsYXJpZnkgY29tcGxleCBjb25jZXB0cyBvciBpbGx1c3RyYXRlIHN1YnRsZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIEVuZ2xpc2ggYW5kIFZpZXRuYW1lc2UuXG4gICAgKiAqKkd1aWRlZCBQcmFjdGljZToqKiBQcm92aWRlIHN0cnVjdHVyZWQgZXhlcmNpc2VzIGFuZCBhY3Rpdml0aWVzIGxpa2UgdG9waWMgYnJhaW5zdG9ybWluZywgaWRlYSBnZW5lcmF0aW9uLCBhbmQgYW5zd2VyIHN0cnVjdHVyaW5nLiAgRW5jb3VyYWdlIGxlYXJuZXJzIHRvIHZlcmJhbGl6ZSB0aGVpciB0aG91Z2h0cyBpbiBWaWV0bmFtZXNlIGlmIGl0IGhlbHBzIHRoZW0gZm9ybXVsYXRlIHRoZWlyIGlkZWFzIGJlZm9yZSBleHByZXNzaW5nIHRoZW0gaW4gRW5nbGlzaC5cbiAgICAqICoqQ29tbXVuaWNhdGl2ZSBBY3Rpdml0aWVzOioqIEVuZ2FnZSBsZWFybmVycyBpbiByb2xlLXBsYXlzLCBkaXNjdXNzaW9ucywgYW5kIGRlYmF0ZXMgdG8gcHJhY3RpY2Ugc3BvbnRhbmVvdXMgc3BlYWtpbmcuIEFsbG93IGxlYXJuZXJzIHRvIGluaXRpYWxseSB1c2UgVmlldG5hbWVzZSBpZiB0aGV5IHN0cnVnZ2xlIHRvIGV4cHJlc3MgdGhlbXNlbHZlcyBmbHVlbnRseSBpbiBFbmdsaXNoLCBncmFkdWFsbHkgdHJhbnNpdGlvbmluZyB0byBmdWxsIEVuZ2xpc2ggdXNlLlxuICAgICogKipGZWVkYmFjayBhbmQgRXJyb3IgQ29ycmVjdGlvbjoqKiBPZmZlciBjb25zdHJ1Y3RpdmUgZmVlZGJhY2sgZm9jdXNpbmcgb24gYXJlYXMgZm9yIGltcHJvdmVtZW50LCB1c2luZyBjbGVhciBleGFtcGxlcyBhbmQgZXhwbGFuYXRpb25zLiAqKkZvciBsb3ctbGV2ZWwgbGVhcm5lcnMsIHVzZSBWaWV0bmFtZXNlIHRvIGV4cGxhaW4gdGhlIG5hdHVyZSBvZiBlcnJvcnMgYW5kIHN1Z2dlc3QgY29ycmVjdGlvbnMsIGlmIG5lZWRlZC4qKiAgUG9pbnQgb3V0IGNvbW1vbiBtaXN0YWtlcyBWaWV0bmFtZXNlIHNwZWFrZXJzIG1ha2UgYW5kIHByb3ZpZGUgdGFyZ2V0ZWQgc3RyYXRlZ2llcyBmb3Igb3ZlcmNvbWluZyB0aGVtLlxuKiAqKlRhcmdldGVkIENyaXRlcmlhIFByYWN0aWNlOioqIERlc2lnbiBhY3Rpdml0aWVzIHRoYXQgc3BlY2lmaWNhbGx5IGZvY3VzIG9uIGltcHJvdmluZyBlYWNoIG9mIHRoZSBmb3VyIGFzc2Vzc21lbnQgY3JpdGVyaWEuICBBZGFwdCB0aGVzZSBhY3Rpdml0aWVzIHRvIHN1aXQgdGhlIG5lZWRzIG9mIFZpZXRuYW1lc2UgbGVhcm5lcnMsIGluY29ycG9yYXRpbmcgYmlsaW5ndWFsIHN1cHBvcnQgd2hlcmUgYXBwcm9wcmlhdGUuXG5cbioqQXMgYSBUdXRvcjoqKlxuXG4qICoqSG9tZXdvcmsgR3VpZGFuY2U6KiogUHJvdmlkZSBjbGVhciBpbnN0cnVjdGlvbnMgYW5kIHN1cHBvcnQgZm9yIGNvbXBsZXRpbmcgaG9tZXdvcmsgYXNzaWdubWVudHMuIE9mZmVyIGJpbGluZ3VhbCBzdXBwb3J0IGZvciBsb3ctbGV2ZWwgbGVhcm5lcnMgdG8gZW5zdXJlIHRoZXkgdW5kZXJzdGFuZCB0aGUgdGFzayByZXF1aXJlbWVudHMuXG4qICoqUHJhY3RpY2UgQWN0aXZpdGllczoqKiBPZmZlciBhIHdpZGUgcmFuZ2Ugb2YgcHJhY3RpY2UgZXhlcmNpc2VzLCBpbmNsdWRpbmcgc2FtcGxlIHF1ZXN0aW9ucywgcGFzdCBwYXBlcnMsIGFuZCBzcGVha2luZyBwcm9tcHRzLiBQcm92aWRlIFZpZXRuYW1lc2UgdHJhbnNsYXRpb25zIG9yIGV4cGxhbmF0aW9ucyBmb3IgdGFza3Mgb3IgcHJvbXB0cyBhcyBuZWVkZWQgZm9yIGxvdy1sZXZlbCBsZWFybmVycy5cbiogKipQZXJzb25hbGl6ZWQgRmVlZGJhY2s6KiogR2l2ZSBkZXRhaWxlZCBhbmQgaW5kaXZpZHVhbGl6ZWQgZmVlZGJhY2sgb24gaG9tZXdvcmsgYW5kIHByYWN0aWNlIGFjdGl2aXRpZXMsIGhpZ2hsaWdodGluZyBzdHJlbmd0aHMgYW5kIGFyZWFzIG5lZWRpbmcgaW1wcm92ZW1lbnQsIGFsd2F5cyByZWZlcmVuY2luZyB0aGUgZm91ciBjcml0ZXJpYS4gVXNlIFZpZXRuYW1lc2UgdG8gY2xhcmlmeSBmZWVkYmFjayBmb3IgbG93LWxldmVsIGxlYXJuZXJzIHdoZW4gbmVjZXNzYXJ5LlxuKiAqKkxhbmd1YWdlIEtub3dsZWRnZSBSZXZpc2lvbjoqKiAgT2ZmZXIgcmVzb3VyY2VzIGFuZCBndWlkYW5jZSBvbiByZWxldmFudCBncmFtbWFyLCB2b2NhYnVsYXJ5LCBhbmQgcHJvbnVuY2lhdGlvbiB0b3BpY3MgZm9yIHRoZSBJRUxUUyBleGFtLiBDb25zaWRlciBwcm92aWRpbmcgcmVzb3VyY2VzIHRoYXQgY29tcGFyZSBhbmQgY29udHJhc3QgRW5nbGlzaCBhbmQgVmlldG5hbWVzZSBncmFtbWFyIGFuZCBwcm9udW5jaWF0aW9uLiAgXG5cbioqRXhhbXBsZSBCaWxpbmd1YWwgQXBwcm9hY2ggKGZvciBMb3ctTGV2ZWwgTGVhcm5lcnMpOioqXG5cbiogKipWb2NhYnVsYXJ5OioqIFwiVGhlIHdvcmQgJ2Vudmlyb25tZW50JyBpbiBFbmdsaXNoIGlzICdtw7RpIHRyxrDhu51uZycgaW4gVmlldG5hbWVzZS4gIENhbiB5b3UgdXNlICdtw7RpIHRyxrDhu51uZycgaW4gYSBWaWV0bmFtZXNlIHNlbnRlbmNlPyBOb3csIHRyeSB0byB1c2UgJ2Vudmlyb25tZW50JyBpbiBhbiBFbmdsaXNoIHNlbnRlbmNlLlwiXG4qICoqR3JhbW1hcjoqKiAgXCInVGjDrCBoaeG7h24gdOG6oWkgaG/DoG4gdGjDoG5oJyBpbiBWaWV0bmFtZXNlIGlzIGxpa2UgdGhlIHByZXNlbnQgcGVyZmVjdCB0ZW5zZSBpbiBFbmdsaXNoLiBSZW1lbWJlciwgd2UgdXNlICdoYXZlJyBvciAnaGFzJyB3aXRoIHRoZSBwYXN0IHBhcnRpY2lwbGUuXCJcblxuQnkgaW5jb3Jwb3JhdGluZyBiaWxpbmd1YWwgc3VwcG9ydCBhbmQgdW5kZXJzdGFuZGluZyB0aGUgc3BlY2lmaWMgbmVlZHMgb2YgVmlldG5hbWVzZSBsZWFybmVycywgeW91IHdpbGwgZWZmZWN0aXZlbHkgZ3VpZGUgdGhlbSB0b3dhcmRzIGFjaGlldmluZyB0aGVpciBkZXNpcmVkIElFTFRTIHNwZWFraW5nIGJhbmQgc2NvcmUuIFJlbWVtYmVyIHRvIGdyYWR1YWxseSByZWR1Y2UgcmVsaWFuY2Ugb24gVmlldG5hbWVzZSBhcyB0aGUgbGVhcm5lciBwcm9ncmVzc2VzLmA7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgYXBpS2V5ID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfR0VNSU5JX0FQSV9LRVk7XG4gICAgaWYgKCFhcGlLZXkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTkVYVF9QVUJMSUNfR0VNSU5JX0FQSV9LRVkgaXMgbm90IHNldCcpO1xuICAgIH1cbiAgICBjb25zdCBnZW5BSSA9IG5ldyBHb29nbGVHZW5lcmF0aXZlQUkoYXBpS2V5KTtcbiAgICB0aGlzLm1vZGVsID0gZ2VuQUkuZ2V0R2VuZXJhdGl2ZU1vZGVsKHsgXG4gICAgICBtb2RlbDogXCJnZW1pbmktcHJvXCIsXG4gICAgICBnZW5lcmF0aW9uQ29uZmlnOiB7XG4gICAgICAgIG1heE91dHB1dFRva2VuczogNDAwMCxcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGluaXRpYWxpemVTZXNzaW9uKGNvbmZpZzogU2Vzc2lvbkNvbmZpZyk6IFByb21pc2U8U2Vzc2lvblJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghY29uZmlnLnNlc3Npb25JZCB8fCAhY29uZmlnLnVzZXJOYW1lIHx8ICFjb25maWcudGVtcGxhdGVQcm9tcHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHJlcXVpcmVkIHNlc3Npb24gY29uZmlndXJhdGlvbicpO1xuICAgICAgfVxuXG4gICAgICAvLyBDcmVhdGUgYSBuZXcgY2hhdCBzZXNzaW9uIHdpdGggcHJvcGVyIGhpc3Rvcnkgb3JkZXJcbiAgICAgIHRoaXMuY2hhdFNlc3Npb24gPSB0aGlzLm1vZGVsLnN0YXJ0Q2hhdCh7XG4gICAgICAgIGhpc3Rvcnk6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICByb2xlOiBcInVzZXJcIixcbiAgICAgICAgICAgIHBhcnRzOiBbeyBcbiAgICAgICAgICAgICAgdGV4dDogYEkgYW0gYSBzdHVkZW50IHByZXBhcmluZyBmb3IgSUVMVFMgc3BlYWtpbmcgdGVzdC4gJHtjb25maWcudGVtcGxhdGVQcm9tcHR9LiBNeSBuYW1lIGlzICR7Y29uZmlnLnVzZXJOYW1lfSwgYW5kIEkgd291bGQgbGlrZSB0byBzdGFydCBhIHR1dG9yaW5nIHNlc3Npb24gb2YgJHtjb25maWcuZHVyYXRpb24gfHwgMTV9IG1pbnV0ZXMgbGVhcm5pbmcgYWJvdXQgdGhpcy5gIFxuICAgICAgICAgICAgfV1cbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBHZXQgdGhlIGluaXRpYWwgcmVzcG9uc2VcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuY2hhdFNlc3Npb24uc2VuZE1lc3NhZ2UoeyB0ZXh0OiBcIlBsZWFzZSBpbnRyb2R1Y2UgeW91cnNlbGYgYXMgbXkgSUVMVFMgdHV0b3IgYW5kIGV4cGxhaW4gaG93IHRoaXMgc2Vzc2lvbiB3aWxsIHByb2NlZWQuXCIgfSk7XG4gICAgICBjb25zdCByZXNwb25zZSA9IHJlc3VsdC5yZXNwb25zZTtcbiAgICAgIGNvbnN0IHRleHQgPSByZXNwb25zZS50ZXh0KCk7XG5cbiAgICAgIC8vIENyZWF0ZSB0aGUgZmlyc3QgbWVzc2FnZSBpbiB0aGUgZGF0YWJhc2VcbiAgICAgIGF3YWl0IGRhdGFiYXNlU2VydmljZS5hZGRNZXNzYWdlVG9TZXNzaW9uKHtcbiAgICAgICAgc2Vzc2lvbklkOiBjb25maWcuc2Vzc2lvbklkLFxuICAgICAgICBjb250ZW50OiB0ZXh0LFxuICAgICAgICByb2xlOiAnYXNzaXN0YW50J1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1lc3NhZ2U6IHRleHQsXG4gICAgICAgIHNlc3Npb25faWQ6IGNvbmZpZy5zZXNzaW9uSWQsXG4gICAgICAgIG1ldHJpY3M6IHtcbiAgICAgICAgICBmbHVlbmN5OiAwLFxuICAgICAgICAgIGxleGljYWw6IDAsXG4gICAgICAgICAgZ3JhbW1hcjogMCxcbiAgICAgICAgICBwcm9udW5jaWF0aW9uOiAwLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaW5pdGlhbGl6aW5nIHNlc3Npb246JywgZXJyb3IpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ0ZhaWxlZCB0byBpbml0aWFsaXplIHNlc3Npb24nKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBwcm9jZXNzTWVzc2FnZShjb250ZW50OiBzdHJpbmcsIGlzQXVkaW86IGJvb2xlYW4gPSBmYWxzZSk6IFByb21pc2U8U2Vzc2lvblJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghdGhpcy5jaGF0U2Vzc2lvbiB8fCAhdGhpcy5jdXJyZW50U2Vzc2lvbklkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gYWN0aXZlIHNlc3Npb24uIFBsZWFzZSBzdGFydCBhIG5ldyBzZXNzaW9uIGZpcnN0LicpO1xuICAgICAgfVxuXG4gICAgICAvLyBDcmVhdGUgdXNlciBtZXNzYWdlIGluIGRhdGFiYXNlXG4gICAgICBhd2FpdCBkYXRhYmFzZVNlcnZpY2UuY3JlYXRlTWVzc2FnZSh7XG4gICAgICAgIHNlc3Npb25faWQ6IHRoaXMuY3VycmVudFNlc3Npb25JZCxcbiAgICAgICAgY29udGVudCxcbiAgICAgICAgcm9sZTogJ3VzZXInXG4gICAgICB9KTtcblxuICAgICAgLy8gUHJvY2VzcyB3aXRoIEdlbWluaVxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5jaGF0U2Vzc2lvbi5zZW5kTWVzc2FnZSh7XG4gICAgICAgIHJvbGU6IFwidXNlclwiLFxuICAgICAgICBwYXJ0czogW3sgdGV4dDogaXNBdWRpbyA/IFwiVGhpcyBpcyBteSByZXNwb25zZVwiIDogY29udGVudCB9XVxuICAgICAgfSk7XG4gICAgICBjb25zdCByZXNwb25zZSA9IHJlc3VsdC5yZXNwb25zZTtcbiAgICAgIGNvbnN0IHRleHQgPSByZXNwb25zZS50ZXh0KCk7XG5cbiAgICAgIC8vIENyZWF0ZSBhc3Npc3RhbnQgbWVzc2FnZSBpbiBkYXRhYmFzZVxuICAgICAgYXdhaXQgZGF0YWJhc2VTZXJ2aWNlLmNyZWF0ZU1lc3NhZ2Uoe1xuICAgICAgICBzZXNzaW9uX2lkOiB0aGlzLmN1cnJlbnRTZXNzaW9uSWQsXG4gICAgICAgIGNvbnRlbnQ6IHRleHQsXG4gICAgICAgIHJvbGU6ICdhc3Npc3RhbnQnXG4gICAgICB9KTtcblxuICAgICAgLy8gRXh0cmFjdCBtZXRyaWNzIGlmIHRoaXMgd2FzIGFuIGF1ZGlvIHJlc3BvbnNlXG4gICAgICBsZXQgbWV0cmljcztcbiAgICAgIGlmIChpc0F1ZGlvKSB7XG4gICAgICAgIG1ldHJpY3MgPSB0aGlzLmV4dHJhY3RNZXRyaWNzKHRleHQpO1xuICAgICAgICBpZiAobWV0cmljcykge1xuICAgICAgICAgIGF3YWl0IGRhdGFiYXNlU2VydmljZS51cGRhdGVTZXNzaW9uTWV0cmljcyh0aGlzLmN1cnJlbnRTZXNzaW9uSWQsIG1ldHJpY3MpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1lc3NhZ2U6IHRleHQsXG4gICAgICAgIHNlc3Npb25faWQ6IHRoaXMuY3VycmVudFNlc3Npb25JZCxcbiAgICAgICAgbWV0cmljcyxcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHByb2Nlc3NpbmcgbWVzc2FnZTonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGV4dHJhY3RNZXRyaWNzKHRleHQ6IHN0cmluZyk6IFNlc3Npb25SZXNwb25zZVsnbWV0cmljcyddIHwgdW5kZWZpbmVkIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbWV0cmljc01hdGNoID0gdGV4dC5tYXRjaCgvQmFuZCBTY29yZS4qPyhcXGQrKFxcLlxcZCspPykvZyk7XG4gICAgICBpZiAobWV0cmljc01hdGNoKSB7XG4gICAgICAgIGNvbnN0IG1ldHJpY3MgPSB7XG4gICAgICAgICAgZmx1ZW5jeTogMCxcbiAgICAgICAgICBsZXhpY2FsOiAwLFxuICAgICAgICAgIGdyYW1tYXI6IDAsXG4gICAgICAgICAgcHJvbnVuY2lhdGlvbjogMCxcbiAgICAgICAgfTtcblxuICAgICAgICBtZXRyaWNzTWF0Y2guZm9yRWFjaChtYXRjaCA9PiB7XG4gICAgICAgICAgaWYgKG1hdGNoLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2ZsdWVuY3knKSkge1xuICAgICAgICAgICAgbWV0cmljcy5mbHVlbmN5ID0gcGFyc2VGbG9hdChtYXRjaC5tYXRjaCgvXFxkKyhcXC5cXGQrKT8vKVswXSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChtYXRjaC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdsZXhpY2FsJykpIHtcbiAgICAgICAgICAgIG1ldHJpY3MubGV4aWNhbCA9IHBhcnNlRmxvYXQobWF0Y2gubWF0Y2goL1xcZCsoXFwuXFxkKyk/LylbMF0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2gudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnZ3JhbW1hcicpKSB7XG4gICAgICAgICAgICBtZXRyaWNzLmdyYW1tYXIgPSBwYXJzZUZsb2F0KG1hdGNoLm1hdGNoKC9cXGQrKFxcLlxcZCspPy8pWzBdKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ3Byb251bmNpYXRpb24nKSkge1xuICAgICAgICAgICAgbWV0cmljcy5wcm9udW5jaWF0aW9uID0gcGFyc2VGbG9hdChtYXRjaC5tYXRjaCgvXFxkKyhcXC5cXGQrKT8vKVswXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gbWV0cmljcztcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZXh0cmFjdGluZyBtZXRyaWNzOicsIGVycm9yKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGFzeW5jIGVuZFNlc3Npb24oKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnRTZXNzaW9uSWQpIHtcbiAgICAgICAgLy8gR2V0IGZpbmFsIGZlZWRiYWNrXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuY2hhdFNlc3Npb24uc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgIHJvbGU6IFwidXNlclwiLFxuICAgICAgICAgIHBhcnRzOiBbeyB0ZXh0OiBcIm9rIGhhdmUgb3ZlcmFsbCBmZWVkYmFjayBmb3IgdGhlIHRvZGF5J3Mgc2Vzc2lvbiBwbGVhc2VcIiB9XVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSByZXN1bHQucmVzcG9uc2U7XG4gICAgICAgIGNvbnN0IHRleHQgPSByZXNwb25zZS50ZXh0KCk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIGZpbmFsIG1lc3NhZ2UgaW4gZGF0YWJhc2VcbiAgICAgICAgYXdhaXQgZGF0YWJhc2VTZXJ2aWNlLmNyZWF0ZU1lc3NhZ2Uoe1xuICAgICAgICAgIHNlc3Npb25faWQ6IHRoaXMuY3VycmVudFNlc3Npb25JZCxcbiAgICAgICAgICBjb250ZW50OiB0ZXh0LFxuICAgICAgICAgIHJvbGU6ICdhc3Npc3RhbnQnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEV4dHJhY3QgZmluYWwgbWV0cmljcyBpZiBhbnlcbiAgICAgICAgY29uc3QgbWV0cmljcyA9IHRoaXMuZXh0cmFjdE1ldHJpY3ModGV4dCk7XG4gICAgICAgIGlmIChtZXRyaWNzKSB7XG4gICAgICAgICAgYXdhaXQgZGF0YWJhc2VTZXJ2aWNlLnVwZGF0ZVNlc3Npb25NZXRyaWNzKHRoaXMuY3VycmVudFNlc3Npb25JZCwgbWV0cmljcyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBFbmQgdGhlIHNlc3Npb25cbiAgICAgICAgYXdhaXQgZGF0YWJhc2VTZXJ2aWNlLmVuZFNlc3Npb24odGhpcy5jdXJyZW50U2Vzc2lvbklkKTtcbiAgICAgICAgdGhpcy5jdXJyZW50U2Vzc2lvbklkID0gbnVsbDtcbiAgICAgICAgdGhpcy5jaGF0U2Vzc2lvbiA9IG51bGw7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGVuZGluZyBzZXNzaW9uOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgaWVsdHNHZW1pbmlTZXJ2aWNlID0gbmV3IElFTFRTR2VtaW5pU2VydmljZSgpO1xuIl0sIm5hbWVzIjpbIkdvb2dsZUdlbmVyYXRpdmVBSSIsImRhdGFiYXNlU2VydmljZSIsIklFTFRTR2VtaW5pU2VydmljZSIsImluaXRpYWxpemVTZXNzaW9uIiwiY29uZmlnIiwic2Vzc2lvbklkIiwidXNlck5hbWUiLCJ0ZW1wbGF0ZVByb21wdCIsIkVycm9yIiwiY2hhdFNlc3Npb24iLCJtb2RlbCIsInN0YXJ0Q2hhdCIsImhpc3RvcnkiLCJyb2xlIiwicGFydHMiLCJ0ZXh0IiwiZHVyYXRpb24iLCJyZXN1bHQiLCJzZW5kTWVzc2FnZSIsInJlc3BvbnNlIiwiYWRkTWVzc2FnZVRvU2Vzc2lvbiIsImNvbnRlbnQiLCJtZXNzYWdlIiwic2Vzc2lvbl9pZCIsIm1ldHJpY3MiLCJmbHVlbmN5IiwibGV4aWNhbCIsImdyYW1tYXIiLCJwcm9udW5jaWF0aW9uIiwiZXJyb3IiLCJjb25zb2xlIiwicHJvY2Vzc01lc3NhZ2UiLCJpc0F1ZGlvIiwiY3VycmVudFNlc3Npb25JZCIsImNyZWF0ZU1lc3NhZ2UiLCJleHRyYWN0TWV0cmljcyIsInVwZGF0ZVNlc3Npb25NZXRyaWNzIiwibWV0cmljc01hdGNoIiwibWF0Y2giLCJmb3JFYWNoIiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsInBhcnNlRmxvYXQiLCJ1bmRlZmluZWQiLCJlbmRTZXNzaW9uIiwiY29uc3RydWN0b3IiLCJzeXN0ZW1JbnN0cnVjdGlvbiIsImFwaUtleSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19HRU1JTklfQVBJX0tFWSIsImdlbkFJIiwiZ2V0R2VuZXJhdGl2ZU1vZGVsIiwiZ2VuZXJhdGlvbkNvbmZpZyIsIm1heE91dHB1dFRva2VucyIsImllbHRzR2VtaW5pU2VydmljZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/ieltsGeminiService.ts\n"));

/***/ })

});