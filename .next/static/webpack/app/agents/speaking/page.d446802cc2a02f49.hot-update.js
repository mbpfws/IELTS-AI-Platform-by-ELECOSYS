"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/agents/speaking/page",{

/***/ "(app-pages-browser)/./src/services/speakingService.ts":
/*!*****************************************!*\
  !*** ./src/services/speakingService.ts ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   speakingService: () => (/* binding */ speakingService)\n/* harmony export */ });\nclass SpeakingService {\n    static getInstance() {\n        if (!SpeakingService.instance) {\n            SpeakingService.instance = new SpeakingService();\n        }\n        return SpeakingService.instance;\n    }\n    // Session Management\n    startSession(userId, duration) {\n        let mode = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 'free', templateId = arguments.length > 3 ? arguments[3] : void 0;\n        const sessionId = \"speaking_\".concat(Date.now());\n        this.currentSession = {\n            id: sessionId,\n            userId,\n            mode,\n            templateId,\n            startTime: Date.now(),\n            duration: duration * 60 * 1000,\n            messages: [],\n            audioUrls: [],\n            metrics: {\n                pronunciation: 0,\n                grammar: 0,\n                vocabulary: 0,\n                fluency: 0,\n                coherence: 0\n            }\n        };\n        // Initialize session with welcome message\n        const welcomeMessage = this.getWelcomeMessage(duration);\n        this.addMessage({\n            role: 'assistant',\n            content: welcomeMessage\n        });\n        // Save to local storage\n        this.saveSession(this.currentSession);\n        return this.currentSession;\n    }\n    getWelcomeMessage(duration) {\n        return \"Xin ch\\xe0o! T\\xf4i l\\xe0 trợ l\\xfd luyện n\\xf3i IELTS của bạn. Ch\\xfang ta sẽ c\\xf3 \".concat(duration, \" ph\\xfat để luyện tập c\\xf9ng nhau. \\n    \\nTrong suốt phi\\xean n\\xe0y, ch\\xfang ta sẽ tập trung v\\xe0o:\\n- Ph\\xe1t \\xe2m v\\xe0 ngữ điệu\\n- Từ vựng v\\xe0 ngữ ph\\xe1p\\n- T\\xednh lưu lo\\xe1t trong giao tiếp\\n\\nT\\xf4i sẽ đ\\xf3ng vai tr\\xf2 l\\xe0 người đối thoại v\\xe0 hướng dẫn bạn. Bạn c\\xf3 thể n\\xf3i tự nhi\\xean, v\\xe0 t\\xf4i sẽ chỉ đưa ra nhận x\\xe9t chi tiết v\\xe0o cuối phi\\xean.\\n\\nBạn muốn bắt đầu với chủ đề n\\xe0o?\");\n    }\n    getRemainingTime() {\n        if (!this.currentSession) return 0;\n        const elapsed = Date.now() - this.currentSession.startTime;\n        return Math.max(0, this.currentSession.duration - elapsed);\n    }\n    isSessionExpired() {\n        return this.getRemainingTime() <= 0;\n    }\n    async sendMessage(content) {\n        if (!this.currentSession) {\n            throw new Error('No active session');\n        }\n        if (this.isSessionExpired()) {\n            // Generate and save final feedback\n            const feedback = await this.generateFeedback();\n            this.endSession(feedback);\n            return \"Phi\\xean luyện tập đ\\xe3 kết th\\xfac. Dưới đ\\xe2y l\\xe0 nhận x\\xe9t chi tiết của t\\xf4i:\\n\\n\".concat(JSON.stringify(feedback, null, 2));\n        }\n        // Add user message\n        this.addMessage({\n            role: 'user',\n            content\n        });\n        // Get AI response\n        const response = await this.generateTutoringResponse(content);\n        // Add AI message\n        this.addMessage({\n            role: 'assistant',\n            content: response\n        });\n        return response;\n    }\n    async generateTutoringResponse(userMessage) {\n        // TODO: Integrate with actual AI service\n        // For now, return a simple response\n        const remainingMinutes = Math.ceil(this.getRemainingTime() / (60 * 1000));\n        if (remainingMinutes <= 2) {\n            return \"Ch\\xfang ta c\\xf2n \".concat(remainingMinutes, \" ph\\xfat. H\\xe3y tiếp tục cuộc tr\\xf2 chuyện v\\xe0 t\\xf4i sẽ đưa ra nhận x\\xe9t chi tiết v\\xe0o cuối phi\\xean.\");\n        }\n        return \"Interesting point! Could you elaborate more on that?\";\n    }\n    async generateFeedback() {\n        if (!this.currentSession) return null;\n        // Chuẩn bị dữ liệu phân tích\n        const sessionData = {\n            duration: this.currentSession.duration,\n            actualDuration: Date.now() - this.currentSession.startTime,\n            messages: this.currentSession.messages,\n            audioRecordings: this.currentSession.audioUrls || []\n        };\n        // Phân tích thời gian phản hồi trung bình\n        const userMessages = this.currentSession.messages.filter((m)=>m.role === 'user');\n        const responseTimeGaps = [];\n        for(let i = 1; i < userMessages.length; i++){\n            const gap = userMessages[i].timestamp - userMessages[i - 1].timestamp;\n            responseTimeGaps.push(gap);\n        }\n        const avgResponseTime = responseTimeGaps.length > 0 ? responseTimeGaps.reduce((a, b)=>a + b, 0) / responseTimeGaps.length : 0;\n        // Phân tích độ dài câu trả lời\n        const avgAnswerLength = userMessages.map((m)=>m.content.split(' ').length).reduce((a, b)=>a + b, 0) / userMessages.length;\n        // Prompt để phân tích chất lượng\n        const analysisPrompt = \"\\nAnalyze this IELTS speaking practice session:\\n\\nSession Duration: \".concat(sessionData.duration / 60000, \" minutes\\nMessages: \").concat(JSON.stringify(sessionData.messages), \"\\n\\nConsider:\\n1. Response time patterns (avg: \").concat(avgResponseTime / 1000, \" seconds)\\n2. Answer length (avg: \").concat(avgAnswerLength, \" words)\\n3. Vocabulary variety\\n4. Grammar accuracy\\n5. Topic development\\n6. Fluency markers\\n\\nProvide detailed feedback and scores following IELTS criteria.\\n    \");\n        // TODO: Gửi prompt tới AI service\n        // Tạm thởi return mock data với các metrics thực tế đã tính được\n        return {\n            scores: {\n                pronunciation: this.calculatePronunciationScore(sessionData),\n                grammar: this.calculateGrammarScore(sessionData),\n                vocabulary: this.calculateVocabularyScore(sessionData),\n                fluency: this.calculateFluencyScore(avgResponseTime),\n                coherence: this.calculateCoherenceScore(avgAnswerLength)\n            },\n            overallBand: 0,\n            feedback: {\n                strengths: this.identifyStrengths(sessionData),\n                improvements: this.identifyImprovements(sessionData),\n                tips: [\n                    \"Practice speaking more frequently\",\n                    \"Record yourself and analyze your speech\",\n                    \"Focus on reducing response time\"\n                ]\n            },\n            sessionStats: {\n                avgResponseTime: avgResponseTime / 1000,\n                avgAnswerLength,\n                totalMessages: userMessages.length,\n                totalDuration: sessionData.actualDuration / 60000 // Convert to minutes\n            },\n            detailedFeedback: {\n                english: this.generateDetailedFeedback(sessionData, \"en\"),\n                vietnamese: this.generateDetailedFeedback(sessionData, \"vi\")\n            }\n        };\n    }\n    calculatePronunciationScore(sessionData) {\n        // TODO: Implement actual pronunciation analysis\n        // For now, return a score based on audio recordings presence\n        return sessionData.audioRecordings.length > 0 ? 7 : 6;\n    }\n    calculateGrammarScore(sessionData) {\n        const userMessages = sessionData.messages.filter((m)=>m.role === 'user');\n        // Basic grammar scoring based on message length and variety\n        const avgLength = userMessages.map((m)=>m.content.split(' ').length).reduce((a, b)=>a + b, 0) / userMessages.length;\n        return Math.min(9, Math.max(5, Math.floor(avgLength / 10) + 5));\n    }\n    calculateVocabularyScore(sessionData) {\n        const userMessages = sessionData.messages.filter((m)=>m.role === 'user');\n        // Count unique words as a basic vocabulary metric\n        const uniqueWords = new Set(userMessages.map((m)=>m.content.toLowerCase().split(/\\W+/)).flat()).size;\n        return Math.min(9, Math.max(5, Math.floor(uniqueWords / 20) + 5));\n    }\n    calculateFluencyScore(avgResponseTime) {\n        // Lower response time = higher fluency score\n        const baseScore = 7;\n        const timeAdjustment = Math.floor(avgResponseTime / 5000); // -1 point per 5 seconds\n        return Math.min(9, Math.max(5, baseScore - timeAdjustment));\n    }\n    calculateCoherenceScore(avgAnswerLength) {\n        // Longer answers suggest better coherence and development\n        return Math.min(9, Math.max(5, Math.floor(avgAnswerLength / 15) + 5));\n    }\n    identifyStrengths(sessionData) {\n        const strengths = [];\n        const userMessages = sessionData.messages.filter((m)=>m.role === 'user');\n        if (userMessages.length > 0) {\n            const avgLength = userMessages.map((m)=>m.content.split(' ').length).reduce((a, b)=>a + b, 0) / userMessages.length;\n            if (avgLength > 20) {\n                strengths.push(\"Good at developing answers with sufficient detail\");\n            }\n            if (sessionData.audioRecordings.length > 0) {\n                strengths.push(\"Willing to practice with voice recordings\");\n            }\n            if (userMessages.length > 5) {\n                strengths.push(\"Active participation in conversation\");\n            }\n        }\n        return strengths;\n    }\n    identifyImprovements(sessionData) {\n        const improvements = [];\n        const userMessages = sessionData.messages.filter((m)=>m.role === 'user');\n        if (userMessages.length > 0) {\n            const avgLength = userMessages.map((m)=>m.content.split(' ').length).reduce((a, b)=>a + b, 0) / userMessages.length;\n            if (avgLength < 15) {\n                improvements.push(\"Try to develop answers with more detail\");\n            }\n            if (sessionData.audioRecordings.length === 0) {\n                improvements.push(\"Practice more with voice recordings\");\n            }\n            if (userMessages.length < 5) {\n                improvements.push(\"Try to engage more in the conversation\");\n            }\n        }\n        return improvements;\n    }\n    generateDetailedFeedback(sessionData, language) {\n        const userMessages = sessionData.messages.filter((m)=>m.role === 'user');\n        const avgLength = userMessages.map((m)=>m.content.split(' ').length).reduce((a, b)=>a + b, 0) / userMessages.length;\n        if (language === \"en\") {\n            return \"During this \".concat(sessionData.duration / 60000, \"-minute session, you provided \").concat(userMessages.length, \" responses with an average length of \").concat(Math.round(avgLength), \" words. \").concat(this.getEngagementFeedback(userMessages.length, avgLength));\n        } else {\n            return \"Trong phi\\xean \".concat(sessionData.duration / 60000, \" ph\\xfat n\\xe0y, bạn đ\\xe3 đưa ra \").concat(userMessages.length, \" c\\xe2u trả lời với độ d\\xe0i trung b\\xecnh \").concat(Math.round(avgLength), \" từ. \").concat(this.getEngagementFeedbackVietnamese(userMessages.length, avgLength));\n        }\n    }\n    getEngagementFeedback(messageCount, avgLength) {\n        if (messageCount > 10 && avgLength > 20) {\n            return \"Your engagement level was excellent, with detailed responses.\";\n        } else if (messageCount > 5) {\n            return \"You maintained good conversation flow but could develop answers more.\";\n        } else {\n            return \"Try to engage more actively in future sessions.\";\n        }\n    }\n    getEngagementFeedbackVietnamese(messageCount, avgLength) {\n        if (messageCount > 10 && avgLength > 20) {\n            return \"Mức độ tương tác của bạn rất tốt, với các câu trả lời chi tiết.\";\n        } else if (messageCount > 5) {\n            return \"Bạn duy trì được luồng hội thoại tốt nhưng có thể phát triển câu trả lời nhiều hơn.\";\n        } else {\n            return \"Hãy cố gắng tương tác tích cực hơn trong các phiên sau.\";\n        }\n    }\n    endSession(metrics) {\n        if (this.currentSession) {\n            this.currentSession.endTime = Date.now();\n            if (metrics) {\n                this.currentSession.metrics = metrics;\n            }\n            this.saveSession(this.currentSession);\n            this.updateHistory(this.currentSession);\n            this.currentSession = null;\n        }\n    }\n    // Message Management\n    addMessage(message) {\n        if (this.currentSession) {\n            const newMessage = {\n                ...message,\n                timestamp: Date.now()\n            };\n            this.currentSession.messages.push(newMessage);\n            this.saveSession(this.currentSession);\n            return newMessage;\n        }\n        return null;\n    }\n    // Audio Management\n    addAudioUrl(url) {\n        if (this.currentSession) {\n            this.currentSession.audioUrls.push(url);\n            this.saveSession(this.currentSession);\n        }\n    }\n    // Storage Management\n    saveSession(session) {\n        try {\n            const sessions = this.getSessions(session.userId);\n            sessions[session.id] = session;\n            localStorage.setItem(\"speaking_sessions_\".concat(session.userId), JSON.stringify(sessions));\n        } catch (error) {\n            console.error('Error saving session:', error);\n        }\n    }\n    getSessions(userId) {\n        try {\n            const sessions = localStorage.getItem(\"speaking_sessions_\".concat(userId));\n            return sessions ? JSON.parse(sessions) : {};\n        } catch (error) {\n            console.error('Error getting sessions:', error);\n            return {};\n        }\n    }\n    updateHistory(session) {\n        try {\n            const history = this.getHistory(session.userId);\n            history.sessions[session.id] = session;\n            history.totalSessions += 1;\n            // Update stats\n            const sessions = Object.values(history.sessions);\n            const totalBand = sessions.reduce((sum, s)=>{\n                var _s_metrics;\n                return sum + (((_s_metrics = s.metrics) === null || _s_metrics === void 0 ? void 0 : _s_metrics.overallBand) || 0);\n            }, 0);\n            history.averageBand = totalBand / sessions.length;\n            const totalTime = sessions.reduce((sum, s)=>{\n                return sum + ((s.endTime || 0) - s.startTime);\n            }, 0);\n            history.timeSpent = Math.round(totalTime / (1000 * 60)); // Convert to minutes\n            history.lastSessionDate = session.endTime || Date.now();\n            localStorage.setItem(\"speaking_history_\".concat(session.userId), JSON.stringify(history));\n        } catch (error) {\n            console.error('Error updating history:', error);\n        }\n    }\n    getHistory(userId) {\n        try {\n            const history = localStorage.getItem(\"speaking_history_\".concat(userId));\n            if (history) {\n                return JSON.parse(history);\n            }\n            return {\n                userId,\n                sessions: {},\n                stats: {\n                    totalSessions: 0,\n                    averageBand: 0,\n                    timeSpent: 0,\n                    lastSessionDate: 0\n                }\n            };\n        } catch (error) {\n            console.error('Error getting history:', error);\n            return {\n                userId,\n                sessions: {},\n                stats: {\n                    totalSessions: 0,\n                    averageBand: 0,\n                    timeSpent: 0,\n                    lastSessionDate: 0\n                }\n            };\n        }\n    }\n    getCurrentSession() {\n        return this.currentSession;\n    }\n    // Get recent sessions for a user\n    getRecentSessions(userId) {\n        let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 5;\n        const sessions = this.getSessions(userId);\n        return Object.values(sessions).sort((a, b)=>b.startTime - a.startTime).slice(0, limit);\n    }\n    // Get session by ID\n    getSession(userId, sessionId) {\n        const sessions = this.getSessions(userId);\n        return sessions[sessionId] || null;\n    }\n    constructor(){\n        this.currentSession = null;\n    }\n}\nconst speakingService = SpeakingService.getInstance();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/speakingService.ts\n"));

/***/ })

});