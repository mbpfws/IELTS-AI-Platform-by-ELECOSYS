"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/agents/speaking/page",{

/***/ "(app-pages-browser)/./src/services/speakingService.ts":
/*!*****************************************!*\
  !*** ./src/services/speakingService.ts ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   speakingService: () => (/* binding */ speakingService)\n/* harmony export */ });\nclass SpeakingService {\n    static getInstance() {\n        if (!SpeakingService.instance) {\n            SpeakingService.instance = new SpeakingService();\n        }\n        return SpeakingService.instance;\n    }\n    // Session Management\n    startSession(userId, duration) {\n        let mode = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 'free', templateId = arguments.length > 3 ? arguments[3] : void 0;\n        const sessionId = \"speaking_\".concat(Date.now());\n        this.currentSession = {\n            id: sessionId,\n            userId,\n            mode,\n            templateId,\n            startTime: Date.now(),\n            duration: duration * 60 * 1000,\n            messages: [],\n            audioUrls: [],\n            metrics: {\n                pronunciation: 0,\n                grammar: 0,\n                vocabulary: 0,\n                fluency: 0,\n                coherence: 0\n            }\n        };\n        // Initialize session with welcome message\n        const welcomeMessage = this.getWelcomeMessage(duration);\n        this.addMessage({\n            role: 'assistant',\n            content: welcomeMessage\n        });\n        // Save to local storage\n        this.saveSession(this.currentSession);\n        return this.currentSession;\n    }\n    getWelcomeMessage(duration) {\n        return \"Xin ch\\xe0o! T\\xf4i l\\xe0 trợ l\\xfd luyện n\\xf3i IELTS của bạn. Ch\\xfang ta sẽ c\\xf3 \".concat(duration, \" ph\\xfat để luyện tập c\\xf9ng nhau. \\n    \\nTrong suốt phi\\xean n\\xe0y, ch\\xfang ta sẽ tập trung v\\xe0o:\\n- Ph\\xe1t \\xe2m v\\xe0 ngữ điệu\\n- Từ vựng v\\xe0 ngữ ph\\xe1p\\n- T\\xednh lưu lo\\xe1t trong giao tiếp\\n\\nT\\xf4i sẽ đ\\xf3ng vai tr\\xf2 l\\xe0 người đối thoại v\\xe0 hướng dẫn bạn. Bạn c\\xf3 thể n\\xf3i tự nhi\\xean, v\\xe0 t\\xf4i sẽ chỉ đưa ra nhận x\\xe9t chi tiết v\\xe0o cuối phi\\xean.\\n\\nBạn muốn bắt đầu với chủ đề n\\xe0o?\");\n    }\n    getRemainingTime() {\n        if (!this.currentSession) return 0;\n        const elapsed = Date.now() - this.currentSession.startTime;\n        return Math.max(0, this.currentSession.duration - elapsed);\n    }\n    isSessionExpired() {\n        return this.getRemainingTime() <= 0;\n    }\n    async sendMessage(content) {\n        if (!this.currentSession) {\n            throw new Error('No active session');\n        }\n        if (this.isSessionExpired()) {\n            // Generate and save final feedback\n            const feedback = await this.generateFeedback();\n            this.endSession(feedback);\n            return \"Phi\\xean luyện tập đ\\xe3 kết th\\xfac. Dưới đ\\xe2y l\\xe0 nhận x\\xe9t chi tiết của t\\xf4i:\\n\\n\".concat(JSON.stringify(feedback, null, 2));\n        }\n        // Add user message\n        this.addMessage({\n            role: 'user',\n            content\n        });\n        // Get AI response\n        const response = await this.generateTutoringResponse(content);\n        // Add AI message\n        this.addMessage({\n            role: 'assistant',\n            content: response\n        });\n        return response;\n    }\n    async generateTutoringResponse(userMessage) {\n        // TODO: Integrate with actual AI service\n        // For now, return a simple response\n        const remainingMinutes = Math.ceil(this.getRemainingTime() / (60 * 1000));\n        if (remainingMinutes <= 2) {\n            return \"Ch\\xfang ta c\\xf2n \".concat(remainingMinutes, \" ph\\xfat. H\\xe3y tiếp tục cuộc tr\\xf2 chuyện v\\xe0 t\\xf4i sẽ đưa ra nhận x\\xe9t chi tiết v\\xe0o cuối phi\\xean.\");\n        }\n        return \"Interesting point! Could you elaborate more on that?\";\n    }\n    async generateFeedback() {\n        // TODO: Integrate with actual AI service for feedback generation\n        return {\n            scores: {\n                pronunciation: 7,\n                grammar: 7,\n                vocabulary: 6,\n                fluency: 6,\n                coherence: 7\n            },\n            overallBand: 6.5,\n            feedback: {\n                strengths: [\n                    \"Good use of vocabulary\",\n                    \"Clear pronunciation of most words\"\n                ],\n                improvements: [\n                    \"Work on sentence linking\",\n                    \"Expand advanced vocabulary usage\"\n                ],\n                tips: [\n                    \"Practice speaking on various topics\",\n                    \"Record yourself and analyze your speech\"\n                ]\n            },\n            detailedFeedback: {\n                english: \"Your speaking shows good potential...\",\n                vietnamese: \"Kỹ năng nói của bạn thể hiện tiềm năng tốt...\"\n            }\n        };\n    }\n    endSession(metrics) {\n        if (this.currentSession) {\n            this.currentSession.endTime = Date.now();\n            if (metrics) {\n                this.currentSession.metrics = metrics;\n            }\n            this.saveSession(this.currentSession);\n            this.updateHistory(this.currentSession);\n            this.currentSession = null;\n        }\n    }\n    // Message Management\n    addMessage(message) {\n        if (this.currentSession) {\n            const newMessage = {\n                ...message,\n                timestamp: Date.now()\n            };\n            this.currentSession.messages.push(newMessage);\n            this.saveSession(this.currentSession);\n            return newMessage;\n        }\n        return null;\n    }\n    // Audio Management\n    addAudioUrl(url) {\n        if (this.currentSession) {\n            this.currentSession.audioUrls.push(url);\n            this.saveSession(this.currentSession);\n        }\n    }\n    // Storage Management\n    saveSession(session) {\n        try {\n            const sessions = this.getSessions(session.userId);\n            sessions[session.id] = session;\n            localStorage.setItem(\"speaking_sessions_\".concat(session.userId), JSON.stringify(sessions));\n        } catch (error) {\n            console.error('Error saving session:', error);\n        }\n    }\n    getSessions(userId) {\n        try {\n            const sessions = localStorage.getItem(\"speaking_sessions_\".concat(userId));\n            return sessions ? JSON.parse(sessions) : {};\n        } catch (error) {\n            console.error('Error getting sessions:', error);\n            return {};\n        }\n    }\n    updateHistory(session) {\n        try {\n            const history = this.getHistory(session.userId);\n            history.sessions[session.id] = session;\n            history.totalSessions += 1;\n            // Update stats\n            const sessions = Object.values(history.sessions);\n            const totalBand = sessions.reduce((sum, s)=>{\n                var _s_metrics;\n                return sum + (((_s_metrics = s.metrics) === null || _s_metrics === void 0 ? void 0 : _s_metrics.overallBand) || 0);\n            }, 0);\n            history.averageBand = totalBand / sessions.length;\n            const totalTime = sessions.reduce((sum, s)=>{\n                return sum + ((s.endTime || 0) - s.startTime);\n            }, 0);\n            history.timeSpent = Math.round(totalTime / (1000 * 60)); // Convert to minutes\n            history.lastSessionDate = session.endTime || Date.now();\n            localStorage.setItem(\"speaking_history_\".concat(session.userId), JSON.stringify(history));\n        } catch (error) {\n            console.error('Error updating history:', error);\n        }\n    }\n    getHistory(userId) {\n        try {\n            const history = localStorage.getItem(\"speaking_history_\".concat(userId));\n            if (history) {\n                return JSON.parse(history);\n            }\n            return {\n                userId,\n                sessions: {},\n                stats: {\n                    totalSessions: 0,\n                    averageBand: 0,\n                    timeSpent: 0,\n                    lastSessionDate: 0\n                }\n            };\n        } catch (error) {\n            console.error('Error getting history:', error);\n            return {\n                userId,\n                sessions: {},\n                stats: {\n                    totalSessions: 0,\n                    averageBand: 0,\n                    timeSpent: 0,\n                    lastSessionDate: 0\n                }\n            };\n        }\n    }\n    getCurrentSession() {\n        return this.currentSession;\n    }\n    // Get recent sessions for a user\n    getRecentSessions(userId) {\n        let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 5;\n        const sessions = this.getSessions(userId);\n        return Object.values(sessions).sort((a, b)=>b.startTime - a.startTime).slice(0, limit);\n    }\n    // Get session by ID\n    getSession(userId, sessionId) {\n        const sessions = this.getSessions(userId);\n        return sessions[sessionId] || null;\n    }\n    constructor(){\n        this.currentSession = null;\n    }\n}\nconst speakingService = SpeakingService.getInstance();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9zZXJ2aWNlcy9zcGVha2luZ1NlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUVBLE1BQU1BO0lBTUosT0FBT0MsY0FBK0I7UUFDcEMsSUFBSSxDQUFDRCxnQkFBZ0JFLFFBQVEsRUFBRTtZQUM3QkYsZ0JBQWdCRSxRQUFRLEdBQUcsSUFBSUY7UUFDakM7UUFDQSxPQUFPQSxnQkFBZ0JFLFFBQVE7SUFDakM7SUFFQSxxQkFBcUI7SUFDckJDLGFBQWFDLE1BQWMsRUFBRUMsUUFBZ0IsRUFBNEU7WUFBMUVDLE9BQUFBLGlFQUE0QixRQUFRQztRQUNqRixNQUFNQyxZQUFZLFlBQXVCLE9BQVhDLEtBQUtDLEdBQUc7UUFDdEMsSUFBSSxDQUFDQyxjQUFjLEdBQUc7WUFDcEJDLElBQUlKO1lBQ0pKO1lBQ0FFO1lBQ0FDO1lBQ0FNLFdBQVdKLEtBQUtDLEdBQUc7WUFDbkJMLFVBQVVBLFdBQVcsS0FBSztZQUMxQlMsVUFBVSxFQUFFO1lBQ1pDLFdBQVcsRUFBRTtZQUNiQyxTQUFTO2dCQUNQQyxlQUFlO2dCQUNmQyxTQUFTO2dCQUNUQyxZQUFZO2dCQUNaQyxTQUFTO2dCQUNUQyxXQUFXO1lBQ2I7UUFDRjtRQUVBLDBDQUEwQztRQUMxQyxNQUFNQyxpQkFBaUIsSUFBSSxDQUFDQyxpQkFBaUIsQ0FBQ2xCO1FBQzlDLElBQUksQ0FBQ21CLFVBQVUsQ0FBQztZQUNkQyxNQUFNO1lBQ05DLFNBQVNKO1FBQ1g7UUFFQSx3QkFBd0I7UUFDeEIsSUFBSSxDQUFDSyxXQUFXLENBQUMsSUFBSSxDQUFDaEIsY0FBYztRQUNwQyxPQUFPLElBQUksQ0FBQ0EsY0FBYztJQUM1QjtJQUVRWSxrQkFBa0JsQixRQUFnQixFQUFVO1FBQ2xELE9BQU8sd0ZBQTRFLE9BQVRBLFVBQVM7SUFVckY7SUFFUXVCLG1CQUEyQjtRQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDakIsY0FBYyxFQUFFLE9BQU87UUFDakMsTUFBTWtCLFVBQVVwQixLQUFLQyxH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akM0RSxrQkFBa0JuRixNQUFjLEVBQXdDO1lBQXRDb0YsUUFBQUEsaUVBQWdCO1FBQ2hELE1BQU0xQixXQUFXLElBQUksQ0FBQ0MsV0FBVyxDQUFDM0Q7UUFDbEMsT0FBT3FFLE9BQU9DLE1BQU0sQ0FBQ1osVUFDbEIyQixJQUFJLENBQUMsQ0FBQ0MsR0FBR0MsSUFBT0EsRUFBRTlFLFNBQVMsR0FBRzZFLEVBQUU3RSxTQUFTLEVBQ3pDK0UsS0FBSyxDQUFDLEdBQUdKO0lBQ2Q7SUFFQSxvQkFBb0I7SUFDcEJLLFdBQVd6RixNQUFjLEVBQUVJLFNBQWlCLEVBQTBCO1FBQ3BFLE1BQU1zRCxXQUFXLElBQUksQ0FBQ0MsV0FBVyxDQUFDM0Q7UUFDbEMsT0FBTzBELFFBQVEsQ0FBQ3RELFVBQVUsSUFBSTtJQUNoQztJQTVRQSxhQUFzQjthQUZkRyxpQkFBeUM7SUFFMUI7QUE2UXpCO0FBRU8sTUFBTW1GLGtCQUFrQjlGLGdCQUFnQkMsV0FBVyxHQUFHIiwic291cmNlcyI6WyJFOlxcU1RBTkQgQUxPTkUgQVBQXFxzcmNcXHNlcnZpY2VzXFxzcGVha2luZ1NlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3BlYWtpbmdTZXNzaW9uLCBTcGVha2luZ0hpc3RvcnksIE1lc3NhZ2UsIFNwZWFraW5nTWV0cmljcyB9IGZyb20gJ0AvdHlwZXMvc3BlYWtpbmdTZXNzaW9uJztcblxuY2xhc3MgU3BlYWtpbmdTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IFNwZWFraW5nU2VydmljZTtcbiAgcHJpdmF0ZSBjdXJyZW50U2Vzc2lvbjogU3BlYWtpbmdTZXNzaW9uIHwgbnVsbCA9IG51bGw7XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgc3RhdGljIGdldEluc3RhbmNlKCk6IFNwZWFraW5nU2VydmljZSB7XG4gICAgaWYgKCFTcGVha2luZ1NlcnZpY2UuaW5zdGFuY2UpIHtcbiAgICAgIFNwZWFraW5nU2VydmljZS5pbnN0YW5jZSA9IG5ldyBTcGVha2luZ1NlcnZpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIFNwZWFraW5nU2VydmljZS5pbnN0YW5jZTtcbiAgfVxuXG4gIC8vIFNlc3Npb24gTWFuYWdlbWVudFxuICBzdGFydFNlc3Npb24odXNlcklkOiBzdHJpbmcsIGR1cmF0aW9uOiBudW1iZXIsIG1vZGU6ICdmcmVlJyB8ICd0ZW1wbGF0ZScgPSAnZnJlZScsIHRlbXBsYXRlSWQ/OiBzdHJpbmcpOiBTcGVha2luZ1Nlc3Npb24ge1xuICAgIGNvbnN0IHNlc3Npb25JZCA9IGBzcGVha2luZ18ke0RhdGUubm93KCl9YDtcbiAgICB0aGlzLmN1cnJlbnRTZXNzaW9uID0ge1xuICAgICAgaWQ6IHNlc3Npb25JZCxcbiAgICAgIHVzZXJJZCxcbiAgICAgIG1vZGUsXG4gICAgICB0ZW1wbGF0ZUlkLFxuICAgICAgc3RhcnRUaW1lOiBEYXRlLm5vdygpLFxuICAgICAgZHVyYXRpb246IGR1cmF0aW9uICogNjAgKiAxMDAwLCAvLyBDb252ZXJ0IG1pbnV0ZXMgdG8gbWlsbGlzZWNvbmRzXG4gICAgICBtZXNzYWdlczogW10sXG4gICAgICBhdWRpb1VybHM6IFtdLFxuICAgICAgbWV0cmljczoge1xuICAgICAgICBwcm9udW5jaWF0aW9uOiAwLFxuICAgICAgICBncmFtbWFyOiAwLFxuICAgICAgICB2b2NhYnVsYXJ5OiAwLFxuICAgICAgICBmbHVlbmN5OiAwLFxuICAgICAgICBjb2hlcmVuY2U6IDBcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBzZXNzaW9uIHdpdGggd2VsY29tZSBtZXNzYWdlXG4gICAgY29uc3Qgd2VsY29tZU1lc3NhZ2UgPSB0aGlzLmdldFdlbGNvbWVNZXNzYWdlKGR1cmF0aW9uKTtcbiAgICB0aGlzLmFkZE1lc3NhZ2Uoe1xuICAgICAgcm9sZTogJ2Fzc2lzdGFudCcsXG4gICAgICBjb250ZW50OiB3ZWxjb21lTWVzc2FnZVxuICAgIH0pO1xuXG4gICAgLy8gU2F2ZSB0byBsb2NhbCBzdG9yYWdlXG4gICAgdGhpcy5zYXZlU2Vzc2lvbih0aGlzLmN1cnJlbnRTZXNzaW9uKTtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50U2Vzc2lvbjtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0V2VsY29tZU1lc3NhZ2UoZHVyYXRpb246IG51bWJlcik6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBYaW4gY2jDoG8hIFTDtGkgbMOgIHRy4bujIGzDvSBsdXnhu4duIG7Ds2kgSUVMVFMgY+G7p2EgYuG6oW4uIENow7puZyB0YSBz4bq9IGPDsyAke2R1cmF0aW9ufSBwaMO6dCDEkeG7gyBsdXnhu4duIHThuq1wIGPDuW5nIG5oYXUuIFxuICAgIFxuVHJvbmcgc3Xhu5F0IHBoacOqbiBuw6B5LCBjaMO6bmcgdGEgc+G6vSB04bqtcCB0cnVuZyB2w6BvOlxuLSBQaMOhdCDDom0gdsOgIG5n4buvIMSRaeG7h3Vcbi0gVOG7qyB24buxbmcgdsOgIG5n4buvIHBow6FwXG4tIFTDrW5oIGzGsHUgbG/DoXQgdHJvbmcgZ2lhbyB0aeG6v3BcblxuVMO0aSBz4bq9IMSRw7NuZyB2YWkgdHLDsiBsw6AgbmfGsOG7nWkgxJHhu5FpIHRob+G6oWkgdsOgIGjGsOG7m25nIGThuqtuIGLhuqFuLiBC4bqhbiBjw7MgdGjhu4MgbsOzaSB04buxIG5oacOqbiwgdsOgIHTDtGkgc+G6vSBjaOG7iSDEkcawYSByYSBuaOG6rW4geMOpdCBjaGkgdGnhur90IHbDoG8gY3Xhu5FpIHBoacOqbi5cblxuQuG6oW4gbXXhu5FuIGLhuq90IMSR4bqndSB24bubaSBjaOG7pyDEkeG7gSBuw6BvP2A7XG4gIH1cblxuICBwcml2YXRlIGdldFJlbWFpbmluZ1RpbWUoKTogbnVtYmVyIHtcbiAgICBpZiAoIXRoaXMuY3VycmVudFNlc3Npb24pIHJldHVybiAwO1xuICAgIGNvbnN0IGVsYXBzZWQgPSBEYXRlLm5vdygpIC0gdGhpcy5jdXJyZW50U2Vzc2lvbi5zdGFydFRpbWU7XG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIHRoaXMuY3VycmVudFNlc3Npb24uZHVyYXRpb24gLSBlbGFwc2VkKTtcbiAgfVxuXG4gIHByaXZhdGUgaXNTZXNzaW9uRXhwaXJlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5nZXRSZW1haW5pbmdUaW1lKCkgPD0gMDtcbiAgfVxuXG4gIGFzeW5jIHNlbmRNZXNzYWdlKGNvbnRlbnQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgaWYgKCF0aGlzLmN1cnJlbnRTZXNzaW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGFjdGl2ZSBzZXNzaW9uJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNTZXNzaW9uRXhwaXJlZCgpKSB7XG4gICAgICAvLyBHZW5lcmF0ZSBhbmQgc2F2ZSBmaW5hbCBmZWVkYmFja1xuICAgICAgY29uc3QgZmVlZGJhY2sgPSBhd2FpdCB0aGlzLmdlbmVyYXRlRmVlZGJhY2soKTtcbiAgICAgIHRoaXMuZW5kU2Vzc2lvbihmZWVkYmFjayk7XG4gICAgICBcbiAgICAgIHJldHVybiBgUGhpw6puIGx1eeG7h24gdOG6rXAgxJHDoyBr4bq/dCB0aMO6Yy4gRMaw4bubaSDEkcOieSBsw6Agbmjhuq1uIHjDqXQgY2hpIHRp4bq/dCBj4bunYSB0w7RpOlxuXG4ke0pTT04uc3RyaW5naWZ5KGZlZWRiYWNrLCBudWxsLCAyKX1gO1xuICAgIH1cblxuICAgIC8vIEFkZCB1c2VyIG1lc3NhZ2VcbiAgICB0aGlzLmFkZE1lc3NhZ2Uoe1xuICAgICAgcm9sZTogJ3VzZXInLFxuICAgICAgY29udGVudFxuICAgIH0pO1xuXG4gICAgLy8gR2V0IEFJIHJlc3BvbnNlXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmdlbmVyYXRlVHV0b3JpbmdSZXNwb25zZShjb250ZW50KTtcbiAgICBcbiAgICAvLyBBZGQgQUkgbWVzc2FnZVxuICAgIHRoaXMuYWRkTWVzc2FnZSh7XG4gICAgICByb2xlOiAnYXNzaXN0YW50JyxcbiAgICAgIGNvbnRlbnQ6IHJlc3BvbnNlXG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdlbmVyYXRlVHV0b3JpbmdSZXNwb25zZSh1c2VyTWVzc2FnZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAvLyBUT0RPOiBJbnRlZ3JhdGUgd2l0aCBhY3R1YWwgQUkgc2VydmljZVxuICAgIC8vIEZvciBub3csIHJldHVybiBhIHNpbXBsZSByZXNwb25zZVxuICAgIGNvbnN0IHJlbWFpbmluZ01pbnV0ZXMgPSBNYXRoLmNlaWwodGhpcy5nZXRSZW1haW5pbmdUaW1lKCkgLyAoNjAgKiAxMDAwKSk7XG4gICAgXG4gICAgaWYgKHJlbWFpbmluZ01pbnV0ZXMgPD0gMikge1xuICAgICAgcmV0dXJuIGBDaMO6bmcgdGEgY8OybiAke3JlbWFpbmluZ01pbnV0ZXN9IHBow7p0LiBIw6N5IHRp4bq/cCB04bulYyBjdeG7mWMgdHLDsiBjaHV54buHbiB2w6AgdMO0aSBz4bq9IMSRxrBhIHJhIG5o4bqtbiB4w6l0IGNoaSB0aeG6v3QgdsOgbyBjdeG7kWkgcGhpw6puLmA7XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiSW50ZXJlc3RpbmcgcG9pbnQhIENvdWxkIHlvdSBlbGFib3JhdGUgbW9yZSBvbiB0aGF0P1wiO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBnZW5lcmF0ZUZlZWRiYWNrKCk6IFByb21pc2U8YW55PiB7XG4gICAgLy8gVE9ETzogSW50ZWdyYXRlIHdpdGggYWN0dWFsIEFJIHNlcnZpY2UgZm9yIGZlZWRiYWNrIGdlbmVyYXRpb25cbiAgICByZXR1cm4ge1xuICAgICAgc2NvcmVzOiB7XG4gICAgICAgIHByb251bmNpYXRpb246IDcsXG4gICAgICAgIGdyYW1tYXI6IDcsXG4gICAgICAgIHZvY2FidWxhcnk6IDYsXG4gICAgICAgIGZsdWVuY3k6IDYsXG4gICAgICAgIGNvaGVyZW5jZTogN1xuICAgICAgfSxcbiAgICAgIG92ZXJhbGxCYW5kOiA2LjUsXG4gICAgICBmZWVkYmFjazoge1xuICAgICAgICBzdHJlbmd0aHM6IFtcbiAgICAgICAgICBcIkdvb2QgdXNlIG9mIHZvY2FidWxhcnlcIixcbiAgICAgICAgICBcIkNsZWFyIHByb251bmNpYXRpb24gb2YgbW9zdCB3b3Jkc1wiXG4gICAgICAgIF0sXG4gICAgICAgIGltcHJvdmVtZW50czogW1xuICAgICAgICAgIFwiV29yayBvbiBzZW50ZW5jZSBsaW5raW5nXCIsXG4gICAgICAgICAgXCJFeHBhbmQgYWR2YW5jZWQgdm9jYWJ1bGFyeSB1c2FnZVwiXG4gICAgICAgIF0sXG4gICAgICAgIHRpcHM6IFtcbiAgICAgICAgICBcIlByYWN0aWNlIHNwZWFraW5nIG9uIHZhcmlvdXMgdG9waWNzXCIsXG4gICAgICAgICAgXCJSZWNvcmQgeW91cnNlbGYgYW5kIGFuYWx5emUgeW91ciBzcGVlY2hcIlxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgZGV0YWlsZWRGZWVkYmFjazoge1xuICAgICAgICBlbmdsaXNoOiBcIllvdXIgc3BlYWtpbmcgc2hvd3MgZ29vZCBwb3RlbnRpYWwuLi5cIixcbiAgICAgICAgdmlldG5hbWVzZTogXCJL4bu5IG7Eg25nIG7Ds2kgY+G7p2EgYuG6oW4gdGjhu4MgaGnhu4duIHRp4buBbSBuxINuZyB04buRdC4uLlwiXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGVuZFNlc3Npb24obWV0cmljcz86IFNwZWFraW5nTWV0cmljcykge1xuICAgIGlmICh0aGlzLmN1cnJlbnRTZXNzaW9uKSB7XG4gICAgICB0aGlzLmN1cnJlbnRTZXNzaW9uLmVuZFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgaWYgKG1ldHJpY3MpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50U2Vzc2lvbi5tZXRyaWNzID0gbWV0cmljcztcbiAgICAgIH1cbiAgICAgIHRoaXMuc2F2ZVNlc3Npb24odGhpcy5jdXJyZW50U2Vzc2lvbik7XG4gICAgICB0aGlzLnVwZGF0ZUhpc3RvcnkodGhpcy5jdXJyZW50U2Vzc2lvbik7XG4gICAgICB0aGlzLmN1cnJlbnRTZXNzaW9uID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvLyBNZXNzYWdlIE1hbmFnZW1lbnRcbiAgYWRkTWVzc2FnZShtZXNzYWdlOiBPbWl0PE1lc3NhZ2UsICd0aW1lc3RhbXAnPikge1xuICAgIGlmICh0aGlzLmN1cnJlbnRTZXNzaW9uKSB7XG4gICAgICBjb25zdCBuZXdNZXNzYWdlID0ge1xuICAgICAgICAuLi5tZXNzYWdlLFxuICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICB9O1xuICAgICAgdGhpcy5jdXJyZW50U2Vzc2lvbi5tZXNzYWdlcy5wdXNoKG5ld01lc3NhZ2UpO1xuICAgICAgdGhpcy5zYXZlU2Vzc2lvbih0aGlzLmN1cnJlbnRTZXNzaW9uKTtcbiAgICAgIHJldHVybiBuZXdNZXNzYWdlO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIEF1ZGlvIE1hbmFnZW1lbnRcbiAgYWRkQXVkaW9VcmwodXJsOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5jdXJyZW50U2Vzc2lvbikge1xuICAgICAgdGhpcy5jdXJyZW50U2Vzc2lvbi5hdWRpb1VybHMucHVzaCh1cmwpO1xuICAgICAgdGhpcy5zYXZlU2Vzc2lvbih0aGlzLmN1cnJlbnRTZXNzaW9uKTtcbiAgICB9XG4gIH1cblxuICAvLyBTdG9yYWdlIE1hbmFnZW1lbnRcbiAgcHJpdmF0ZSBzYXZlU2Vzc2lvbihzZXNzaW9uOiBTcGVha2luZ1Nlc3Npb24pIHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgc2Vzc2lvbnMgPSB0aGlzLmdldFNlc3Npb25zKHNlc3Npb24udXNlcklkKTtcbiAgICAgIHNlc3Npb25zW3Nlc3Npb24uaWRdID0gc2Vzc2lvbjtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGBzcGVha2luZ19zZXNzaW9uc18ke3Nlc3Npb24udXNlcklkfWAsIEpTT04uc3RyaW5naWZ5KHNlc3Npb25zKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNhdmluZyBzZXNzaW9uOicsIGVycm9yKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldFNlc3Npb25zKHVzZXJJZDogc3RyaW5nKTogeyBbc2Vzc2lvbklkOiBzdHJpbmddOiBTcGVha2luZ1Nlc3Npb24gfSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHNlc3Npb25zID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oYHNwZWFraW5nX3Nlc3Npb25zXyR7dXNlcklkfWApO1xuICAgICAgcmV0dXJuIHNlc3Npb25zID8gSlNPTi5wYXJzZShzZXNzaW9ucykgOiB7fTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2V0dGluZyBzZXNzaW9uczonLCBlcnJvcik7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVIaXN0b3J5KHNlc3Npb246IFNwZWFraW5nU2Vzc2lvbikge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBoaXN0b3J5ID0gdGhpcy5nZXRIaXN0b3J5KHNlc3Npb24udXNlcklkKTtcbiAgICAgIGhpc3Rvcnkuc2Vzc2lvbnNbc2Vzc2lvbi5pZF0gPSBzZXNzaW9uO1xuICAgICAgaGlzdG9yeS50b3RhbFNlc3Npb25zICs9IDE7XG4gICAgICBcbiAgICAgIC8vIFVwZGF0ZSBzdGF0c1xuICAgICAgY29uc3Qgc2Vzc2lvbnMgPSBPYmplY3QudmFsdWVzKGhpc3Rvcnkuc2Vzc2lvbnMpO1xuICAgICAgY29uc3QgdG90YWxCYW5kID0gc2Vzc2lvbnMucmVkdWNlKChzdW0sIHMpID0+IHN1bSArIChzLm1ldHJpY3M/Lm92ZXJhbGxCYW5kIHx8IDApLCAwKTtcbiAgICAgIGhpc3RvcnkuYXZlcmFnZUJhbmQgPSB0b3RhbEJhbmQgLyBzZXNzaW9ucy5sZW5ndGg7XG4gICAgICBcbiAgICAgIGNvbnN0IHRvdGFsVGltZSA9IHNlc3Npb25zLnJlZHVjZSgoc3VtLCBzKSA9PiB7XG4gICAgICAgIHJldHVybiBzdW0gKyAoKHMuZW5kVGltZSB8fCAwKSAtIHMuc3RhcnRUaW1lKTtcbiAgICAgIH0sIDApO1xuICAgICAgaGlzdG9yeS50aW1lU3BlbnQgPSBNYXRoLnJvdW5kKHRvdGFsVGltZSAvICgxMDAwICogNjApKTsgLy8gQ29udmVydCB0byBtaW51dGVzXG4gICAgICBcbiAgICAgIGhpc3RvcnkubGFzdFNlc3Npb25EYXRlID0gc2Vzc2lvbi5lbmRUaW1lIHx8IERhdGUubm93KCk7XG5cbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGBzcGVha2luZ19oaXN0b3J5XyR7c2Vzc2lvbi51c2VySWR9YCwgSlNPTi5zdHJpbmdpZnkoaGlzdG9yeSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciB1cGRhdGluZyBoaXN0b3J5OicsIGVycm9yKTtcbiAgICB9XG4gIH1cblxuICBnZXRIaXN0b3J5KHVzZXJJZDogc3RyaW5nKTogU3BlYWtpbmdIaXN0b3J5IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgaGlzdG9yeSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGBzcGVha2luZ19oaXN0b3J5XyR7dXNlcklkfWApO1xuICAgICAgaWYgKGhpc3RvcnkpIHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoaGlzdG9yeSk7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICB1c2VySWQsXG4gICAgICAgIHNlc3Npb25zOiB7fSxcbiAgICAgICAgc3RhdHM6IHtcbiAgICAgICAgICB0b3RhbFNlc3Npb25zOiAwLFxuICAgICAgICAgIGF2ZXJhZ2VCYW5kOiAwLFxuICAgICAgICAgIHRpbWVTcGVudDogMCxcbiAgICAgICAgICBsYXN0U2Vzc2lvbkRhdGU6IDAsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIGhpc3Rvcnk6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdXNlcklkLFxuICAgICAgICBzZXNzaW9uczoge30sXG4gICAgICAgIHN0YXRzOiB7XG4gICAgICAgICAgdG90YWxTZXNzaW9uczogMCxcbiAgICAgICAgICBhdmVyYWdlQmFuZDogMCxcbiAgICAgICAgICB0aW1lU3BlbnQ6IDAsXG4gICAgICAgICAgbGFzdFNlc3Npb25EYXRlOiAwLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBnZXRDdXJyZW50U2Vzc2lvbigpOiBTcGVha2luZ1Nlc3Npb24gfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50U2Vzc2lvbjtcbiAgfVxuXG4gIC8vIEdldCByZWNlbnQgc2Vzc2lvbnMgZm9yIGEgdXNlclxuICBnZXRSZWNlbnRTZXNzaW9ucyh1c2VySWQ6IHN0cmluZywgbGltaXQ6IG51bWJlciA9IDUpOiBTcGVha2luZ1Nlc3Npb25bXSB7XG4gICAgY29uc3Qgc2Vzc2lvbnMgPSB0aGlzLmdldFNlc3Npb25zKHVzZXJJZCk7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoc2Vzc2lvbnMpXG4gICAgICAuc29ydCgoYSwgYikgPT4gKGIuc3RhcnRUaW1lIC0gYS5zdGFydFRpbWUpKVxuICAgICAgLnNsaWNlKDAsIGxpbWl0KTtcbiAgfVxuXG4gIC8vIEdldCBzZXNzaW9uIGJ5IElEXG4gIGdldFNlc3Npb24odXNlcklkOiBzdHJpbmcsIHNlc3Npb25JZDogc3RyaW5nKTogU3BlYWtpbmdTZXNzaW9uIHwgbnVsbCB7XG4gICAgY29uc3Qgc2Vzc2lvbnMgPSB0aGlzLmdldFNlc3Npb25zKHVzZXJJZCk7XG4gICAgcmV0dXJuIHNlc3Npb25zW3Nlc3Npb25JZF0gfHwgbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgY29uc3Qgc3BlYWtpbmdTZXJ2aWNlID0gU3BlYWtpbmdTZXJ2aWNlLmdldEluc3RhbmNlKCk7XG4iXSwibmFtZXMiOlsiU3BlYWtpbmdTZXJ2aWNlIiwiZ2V0SW5zdGFuY2UiLCJpbnN0YW5jZSIsInN0YXJ0U2Vzc2lvbiIsInVzZXJJZCIsImR1cmF0aW9uIiwibW9kZSIsInRlbXBsYXRlSWQiLCJzZXNzaW9uSWQiLCJEYXRlIiwibm93IiwiY3VycmVudFNlc3Npb24iLCJpZCIsInN0YXJ0VGltZSIsIm1lc3NhZ2VzIiwiYXVkaW9VcmxzIiwibWV0cmljcyIsInByb251bmNpYXRpb24iLCJncmFtbWFyIiwidm9jYWJ1bGFyeSIsImZsdWVuY3kiLCJjb2hlcmVuY2UiLCJ3ZWxjb21lTWVzc2FnZSIsImdldFdlbGNvbWVNZXNzYWdlIiwiYWRkTWVzc2FnZSIsInJvbGUiLCJjb250ZW50Iiwic2F2ZVNlc3Npb24iLCJnZXRSZW1haW5pbmdUaW1lIiwiZWxhcHNlZCIsIk1hdGgiLCJtYXgiLCJpc1Nlc3Npb25FeHBpcmVkIiwic2VuZE1lc3NhZ2UiLCJFcnJvciIsImZlZWRiYWNrIiwiZ2VuZXJhdGVGZWVkYmFjayIsImVuZFNlc3Npb24iLCJKU09OIiwic3RyaW5naWZ5IiwicmVzcG9uc2UiLCJnZW5lcmF0ZVR1dG9yaW5nUmVzcG9uc2UiLCJ1c2VyTWVzc2FnZSIsInJlbWFpbmluZ01pbnV0ZXMiLCJjZWlsIiwic2NvcmVzIiwib3ZlcmFsbEJhbmQiLCJzdHJlbmd0aHMiLCJpbXByb3ZlbWVudHMiLCJ0aXBzIiwiZGV0YWlsZWRGZWVkYmFjayIsImVuZ2xpc2giLCJ2aWV0bmFtZXNlIiwiZW5kVGltZSIsInVwZGF0ZUhpc3RvcnkiLCJtZXNzYWdlIiwibmV3TWVzc2FnZSIsInRpbWVzdGFtcCIsInB1c2giLCJhZGRBdWRpb1VybCIsInVybCIsInNlc3Npb24iLCJzZXNzaW9ucyIsImdldFNlc3Npb25zIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsImVycm9yIiwiY29uc29sZSIsImdldEl0ZW0iLCJwYXJzZSIsImhpc3RvcnkiLCJnZXRIaXN0b3J5IiwidG90YWxTZXNzaW9ucyIsIk9iamVjdCIsInZhbHVlcyIsInRvdGFsQmFuZCIsInJlZHVjZSIsInN1bSIsInMiLCJhdmVyYWdlQmFuZCIsImxlbmd0aCIsInRvdGFsVGltZSIsInRpbWVTcGVudCIsInJvdW5kIiwibGFzdFNlc3Npb25EYXRlIiwic3RhdHMiLCJnZXRDdXJyZW50U2Vzc2lvbiIsImdldFJlY2VudFNlc3Npb25zIiwibGltaXQiLCJzb3J0IiwiYSIsImIiLCJzbGljZSIsImdldFNlc3Npb24iLCJzcGVha2luZ1NlcnZpY2UiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/speakingService.ts\n"));

/***/ })

});